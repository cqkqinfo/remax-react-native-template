// tslint:disable
/**
 * androm
 * 随访记录设置项
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Admin
 */
export interface Admin {
    /**
     * 管理员ID
     * @type {number}
     * @memberof Admin
     */
    id?: number;
    /**
     * 登录账号
     * @type {string}
     * @memberof Admin
     */
    account?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof Admin
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof Admin
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof Admin
     */
    birthday?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof Admin
     */
    phone?: string;
    /**
     * 所属单位
     * @type {string}
     * @memberof Admin
     */
    institution?: string;
    /**
     * 1=启用 0=禁用
     * @type {number}
     * @memberof Admin
     */
    status?: number;
    /**
     * 头像链接
     * @type {string}
     * @memberof Admin
     */
    avatar?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof Admin
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof Admin
     */
    updatedAt?: string;
}
/**
 * 管理员消息
 * @export
 * @interface AdminMsg
 */
export interface AdminMsg {
    /**
     * 管理员消息ID
     * @type {number}
     * @memberof AdminMsg
     */
    id?: number;
    /**
     * 消息类型 1=医生注册消息 2=系统消息
     * @type {number}
     * @memberof AdminMsg
     */
    msgType?: number;
    /**
     * 消息内容
     * @type {string}
     * @memberof AdminMsg
     */
    content?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof AdminMsg
     */
    createdAt?: string;
}
/**
 * 管理员消息详情vo
 * @export
 * @interface AdminMsgDetail
 */
export interface AdminMsgDetail {
    /**
     * 管理员消息ID
     * @type {number}
     * @memberof AdminMsgDetail
     */
    id?: number;
    /**
     * 消息类型： 医生注册消息，系统消息
     * @type {string}
     * @memberof AdminMsgDetail
     */
    msgType?: string;
    /**
     * 消息内容
     * @type {string}
     * @memberof AdminMsgDetail
     */
    content?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof AdminMsgDetail
     */
    createdAt?: string;
    /**
     * 是否已读。0 未读，1 已读
     * @type {number}
     * @memberof AdminMsgDetail
     */
    readFlag?: number;
    /**
     * 阅读时间
     * @type {string}
     * @memberof AdminMsgDetail
     */
    readedAt?: string;
}
/**
 * 管理员消息阅读
 * @export
 * @interface AdminMsgRead
 */
export interface AdminMsgRead {
    /**
     * 管理员消息已读记录ID
     * @type {number}
     * @memberof AdminMsgRead
     */
    id?: number;
    /**
     * 管理员ID
     * @type {number}
     * @memberof AdminMsgRead
     */
    adminId?: number;
    /**
     * 管理员消息ID
     * @type {number}
     * @memberof AdminMsgRead
     */
    adminMsgId?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof AdminMsgRead
     */
    createdAt?: string;
    /**
     * 已读并且屏蔽该消息。不出现在消息列表中。0 不屏蔽，1 屏蔽
     * @type {number}
     * @memberof AdminMsgRead
     */
    deleteFlag?: number;
}
/**
 * 
 * @export
 * @interface AiDiagnosis
 */
export interface AiDiagnosis {
    /**
     * 智能诊疗ID
     * @type {number}
     * @memberof AiDiagnosis
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof AiDiagnosis
     */
    patientRecordId?: number;
    /**
     * 
     * @type {AiDiagnosisTreatmentTlics}
     * @memberof AiDiagnosis
     */
    treatmentTlics?: AiDiagnosisTreatmentTlics;
    /**
     * 
     * @type {AiDiagnosisTreatmentTlaosis}
     * @memberof AiDiagnosis
     */
    treatmentTlaosis?: AiDiagnosisTreatmentTlaosis;
    /**
     * 
     * @type {AiDiagnosisOperationTlics}
     * @memberof AiDiagnosis
     */
    operationTlics?: AiDiagnosisOperationTlics;
    /**
     * 
     * @type {AiDiagnosisOperationLsc}
     * @memberof AiDiagnosis
     */
    operationLsc?: AiDiagnosisOperationLsc;
    /**
     * 创建时间
     * @type {string}
     * @memberof AiDiagnosis
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof AiDiagnosis
     */
    updatedAt?: string;
}
/**
 * 手术方案-LSC分型
 * @export
 * @interface AiDiagnosisOperationLsc
 */
export interface AiDiagnosisOperationLsc {
    /**
     * 得分
     * @type {number}
     * @memberof AiDiagnosisOperationLsc
     */
    score?: number;
    /**
     * 建议
     * @type {string}
     * @memberof AiDiagnosisOperationLsc
     */
    suggest?: string;
    /**
     * 备注
     * @type {string}
     * @memberof AiDiagnosisOperationLsc
     */
    remark?: string;
}
/**
 * 手术策略-TLICS分型
 * @export
 * @interface AiDiagnosisOperationTlics
 */
export interface AiDiagnosisOperationTlics {
    /**
     * 建议
     * @type {string}
     * @memberof AiDiagnosisOperationTlics
     */
    suggest?: string;
}
/**
 * 
 * @export
 * @interface AiDiagnosisOption
 */
export interface AiDiagnosisOption {
    /**
     * 智能诊疗选择项ID
     * @type {number}
     * @memberof AiDiagnosisOption
     */
    id?: number;
    /**
     * 诊疗指标名称，例如:骨折形态
     * @type {string}
     * @memberof AiDiagnosisOption
     */
    name?: string;
    /**
     * 诊疗指标描述
     * @type {string}
     * @memberof AiDiagnosisOption
     */
    content?: string;
    /**
     * 诊疗指标描述图片URL
     * @type {string}
     * @memberof AiDiagnosisOption
     */
    imgUrl?: string;
    /**
     * 已选中的选项文本
     * @type {string}
     * @memberof AiDiagnosisOption
     */
    label?: string;
    /**
     * 选项列表
     * @type {Array<AiDiagnosisOptionOptions>}
     * @memberof AiDiagnosisOption
     */
    options?: Array<AiDiagnosisOptionOptions>;
}
/**
 * 下级指标列表
 * @export
 * @interface AiDiagnosisOptionChild
 */
export interface AiDiagnosisOptionChild {
    /**
     * 智能诊疗选择项ID
     * @type {number}
     * @memberof AiDiagnosisOptionChild
     */
    id?: number;
    /**
     * 诊疗指标名称，例如:骨折形态
     * @type {string}
     * @memberof AiDiagnosisOptionChild
     */
    name?: string;
    /**
     * 诊疗指标描述
     * @type {string}
     * @memberof AiDiagnosisOptionChild
     */
    content?: string;
    /**
     * 诊疗指标描述图片URL
     * @type {string}
     * @memberof AiDiagnosisOptionChild
     */
    imgUrl?: string;
    /**
     * 选项列表
     * @type {Array<AiDiagnosisOptionChildOptions>}
     * @memberof AiDiagnosisOptionChild
     */
    options?: Array<AiDiagnosisOptionChildOptions>;
}
/**
 * 下级指标列表
 * @export
 * @interface AiDiagnosisOptionChildChild
 */
export interface AiDiagnosisOptionChildChild {
    /**
     * 智能诊疗选择项ID
     * @type {number}
     * @memberof AiDiagnosisOptionChildChild
     */
    id?: number;
    /**
     * 诊疗指标名称，例如:骨折形态
     * @type {string}
     * @memberof AiDiagnosisOptionChildChild
     */
    name?: string;
    /**
     * 诊疗指标描述
     * @type {string}
     * @memberof AiDiagnosisOptionChildChild
     */
    content?: string;
    /**
     * 诊疗指标描述图片URL
     * @type {string}
     * @memberof AiDiagnosisOptionChildChild
     */
    imgUrl?: string;
    /**
     * 选项列表
     * @type {Array<AiDiagnosisOptionChildChildOptions>}
     * @memberof AiDiagnosisOptionChildChild
     */
    options?: Array<AiDiagnosisOptionChildChildOptions>;
}
/**
 * 
 * @export
 * @interface AiDiagnosisOptionChildChildOptions
 */
export interface AiDiagnosisOptionChildChildOptions {
    /**
     * 
     * @type {number}
     * @memberof AiDiagnosisOptionChildChildOptions
     */
    id?: number;
    /**
     * 诊疗选项名称，例如:压缩型
     * @type {string}
     * @memberof AiDiagnosisOptionChildChildOptions
     */
    name?: string;
    /**
     * 是否选中 1=是 0=否
     * @type {number}
     * @memberof AiDiagnosisOptionChildChildOptions
     */
    select?: number;
}
/**
 * 
 * @export
 * @interface AiDiagnosisOptionChildOptions
 */
export interface AiDiagnosisOptionChildOptions {
    /**
     * 
     * @type {number}
     * @memberof AiDiagnosisOptionChildOptions
     */
    id?: number;
    /**
     * 诊疗选项名称，例如:压缩型
     * @type {string}
     * @memberof AiDiagnosisOptionChildOptions
     */
    name?: string;
    /**
     * 是否选中 1=是 0=否
     * @type {number}
     * @memberof AiDiagnosisOptionChildOptions
     */
    select?: number;
    /**
     * 
     * @type {AiDiagnosisOptionChildChild}
     * @memberof AiDiagnosisOptionChildOptions
     */
    child?: AiDiagnosisOptionChildChild;
}
/**
 * 
 * @export
 * @interface AiDiagnosisOptionOptions
 */
export interface AiDiagnosisOptionOptions {
    /**
     * 
     * @type {number}
     * @memberof AiDiagnosisOptionOptions
     */
    id?: number;
    /**
     * 诊疗选项名称，例如:压缩型
     * @type {string}
     * @memberof AiDiagnosisOptionOptions
     */
    name?: string;
    /**
     * 是否选中 1=是 0=否
     * @type {number}
     * @memberof AiDiagnosisOptionOptions
     */
    select?: number;
    /**
     * 
     * @type {AiDiagnosisOptionChild}
     * @memberof AiDiagnosisOptionOptions
     */
    child?: AiDiagnosisOptionChild;
}
/**
 * 
 * @export
 * @interface AiDiagnosisRecord
 */
export interface AiDiagnosisRecord {
    /**
     * 智能诊疗修改记录ID
     * @type {number}
     * @memberof AiDiagnosisRecord
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof AiDiagnosisRecord
     */
    patientRecordId?: number;
    /**
     * 修改原因
     * @type {string}
     * @memberof AiDiagnosisRecord
     */
    reason?: string;
    /**
     * 修改内容
     * @type {string}
     * @memberof AiDiagnosisRecord
     */
    content?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof AiDiagnosisRecord
     */
    createdAt?: string;
}
/**
 * 治疗方案-TLAOSIS分型
 * @export
 * @interface AiDiagnosisTreatmentTlaosis
 */
export interface AiDiagnosisTreatmentTlaosis {
    /**
     * 得分
     * @type {number}
     * @memberof AiDiagnosisTreatmentTlaosis
     */
    score?: number;
    /**
     * 建议
     * @type {string}
     * @memberof AiDiagnosisTreatmentTlaosis
     */
    suggest?: string;
}
/**
 * 治疗方案-TLICS分型
 * @export
 * @interface AiDiagnosisTreatmentTlics
 */
export interface AiDiagnosisTreatmentTlics {
    /**
     * 得分
     * @type {number}
     * @memberof AiDiagnosisTreatmentTlics
     */
    score?: number;
    /**
     * 建议
     * @type {string}
     * @memberof AiDiagnosisTreatmentTlics
     */
    suggest?: string;
}
/**
 * 沟通记录
 * @export
 * @interface Chat
 */
export interface Chat {
    /**
     * 沟通记录ID
     * @type {number}
     * @memberof Chat
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof Chat
     */
    patientRecordId?: number;
    /**
     * 文本内容
     * @type {string}
     * @memberof Chat
     */
    textContent?: string;
    /**
     * 图片URL
     * @type {string}
     * @memberof Chat
     */
    imageUrl?: string;
    /**
     * 1=医生发言 0=患者发言
     * @type {number}
     * @memberof Chat
     */
    fromDoctor?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof Chat
     */
    createdAt?: string;
    /**
     * 患者ID
     * @type {number}
     * @memberof Chat
     */
    patientId?: number;
    /**
     * 医生ID
     * @type {number}
     * @memberof Chat
     */
    doctorId?: number;
}
/**
 * 
 * @export
 * @interface Doctor
 */
export interface Doctor {
    /**
     * 医生ID
     * @type {number}
     * @memberof Doctor
     */
    id?: number;
    /**
     * 手机号码
     * @type {string}
     * @memberof Doctor
     */
    phone?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof Doctor
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof Doctor
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof Doctor
     */
    birthday?: string;
    /**
     * 来自地区
     * @type {string}
     * @memberof Doctor
     */
    fromPlace?: string;
    /**
     * 来自地区(层级数据)
     * @type {Array<string>}
     * @memberof Doctor
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 工作医院
     * @type {string}
     * @memberof Doctor
     */
    hospitalName?: string;
    /**
     * 工作科室
     * @type {string}
     * @memberof Doctor
     */
    majorName?: string;
    /**
     * 职称
     * @type {string}
     * @memberof Doctor
     */
    titleName?: string;
    /**
     * 相关证件
     * @type {Array<string>}
     * @memberof Doctor
     */
    certPics?: Array<string>;
    /**
     * 年龄
     * @type {number}
     * @memberof Doctor
     */
    age?: number;
    /**
     * 头像链接
     * @type {string}
     * @memberof Doctor
     */
    avatar?: string;
    /**
     * 审核状态 0=待审核 1=通过 -1=驳回
     * @type {number}
     * @memberof Doctor
     */
    verifyState?: number;
    /**
     * 驳回原因
     * @type {string}
     * @memberof Doctor
     */
    rejectReason?: string;
    /**
     * 微信小程序openid
     * @type {string}
     * @memberof Doctor
     */
    wxAppOpenid?: string;
    /**
     * 微信unionid
     * @type {string}
     * @memberof Doctor
     */
    wxUnionid?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof Doctor
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof Doctor
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface DoctorAiDiagnosisOptions
 */
export interface DoctorAiDiagnosisOptions {
    /**
     * 指标ID
     * @type {number}
     * @memberof DoctorAiDiagnosisOptions
     */
    id?: number;
    /**
     * 选项ID
     * @type {number}
     * @memberof DoctorAiDiagnosisOptions
     */
    optionId?: number;
}
/**
 * 医生消息
 * @export
 * @interface DoctorMsg
 */
export interface DoctorMsg {
    /**
     * 医生消息ID
     * @type {number}
     * @memberof DoctorMsg
     */
    id?: number;
    /**
     * 医生ID
     * @type {number}
     * @memberof DoctorMsg
     */
    doctorId?: number;
    /**
     * 消息内容
     * @type {string}
     * @memberof DoctorMsg
     */
    content?: string;
    /**
     * 是否已读 1=已读 0=未读
     * @type {number}
     * @memberof DoctorMsg
     */
    read?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof DoctorMsg
     */
    createdAt?: string;
}
/**
 * 
 * @export
 * @interface DoctorReminderDetailVo
 */
export interface DoctorReminderDetailVo {
    /**
     * 提醒ID
     * @type {number}
     * @memberof DoctorReminderDetailVo
     */
    id?: number;
    /**
     * 事件类型 1=复诊 2=随访
     * @type {number}
     * @memberof DoctorReminderDetailVo
     */
    remindType?: number;
    /**
     * 提醒日期
     * @type {Array<DoctorReminderDetailVoRemindTimes>}
     * @memberof DoctorReminderDetailVo
     */
    remindTimes?: Array<DoctorReminderDetailVoRemindTimes>;
    /**
     * 病例ID
     * @type {number}
     * @memberof DoctorReminderDetailVo
     */
    patientRecordId?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof DoctorReminderDetailVo
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof DoctorReminderDetailVo
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface DoctorReminderDetailVoRemindTimes
 */
export interface DoctorReminderDetailVoRemindTimes {
    /**
     * 提醒日期ID
     * @type {number}
     * @memberof DoctorReminderDetailVoRemindTimes
     */
    id?: number;
    /**
     * 提醒日期
     * @type {string}
     * @memberof DoctorReminderDetailVoRemindTimes
     */
    remindDate?: string;
    /**
     * 是否已提醒。0 未提醒，1 已提醒
     * @type {number}
     * @memberof DoctorReminderDetailVoRemindTimes
     */
    remindFlag?: number;
}
/**
 * 随访记录
 * @export
 * @interface FollowupRecord
 */
export interface FollowupRecord {
    /**
     * 随访ID
     * @type {number}
     * @memberof FollowupRecord
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof FollowupRecord
     */
    patientRecordId?: number;
    /**
     * 随访日期
     * @type {string}
     * @memberof FollowupRecord
     */
    visitDate?: string;
    /**
     * 随访详情(JSON格式)
     * @type {Array<FollowupRecordDetail>}
     * @memberof FollowupRecord
     */
    followupDetail?: Array<FollowupRecordDetail>;
    /**
     * 附件
     * @type {Array<string>}
     * @memberof FollowupRecord
     */
    attachment?: Array<string>;
    /**
     * 备注
     * @type {string}
     * @memberof FollowupRecord
     */
    remark?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof FollowupRecord
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof FollowupRecord
     */
    updatedAt?: string;
    /**
     * Oswestry功能障碍指数评分
     * @type {number}
     * @memberof FollowupRecord
     */
    oswestryScore?: number;
    /**
     * 腰椎JOA评分
     * @type {number}
     * @memberof FollowupRecord
     */
    joaScore?: number;
}
/**
 * 随访记录详情
 * @export
 * @interface FollowupRecordDetail
 */
export interface FollowupRecordDetail {
    /**
     * 随访记录详情ID
     * @type {number}
     * @memberof FollowupRecordDetail
     */
    id?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof FollowupRecordDetail
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof FollowupRecordDetail
     */
    updatedAt?: string;
    /**
     * 随访记录ID
     * @type {number}
     * @memberof FollowupRecordDetail
     */
    recordId?: number;
    /**
     * 随访记录指标项ID
     * @type {number}
     * @memberof FollowupRecordDetail
     */
    optionId?: number;
    /**
     * 随访记录指标输入值
     * @type {string}
     * @memberof FollowupRecordDetail
     */
    optionValue?: string;
    /**
     * 随访记录指标选项ID。对应的还是随访记录指标表
     * @type {number}
     * @memberof FollowupRecordDetail
     */
    optionValueId?: number;
    /**
     * 当前指标项得分
     * @type {number}
     * @memberof FollowupRecordDetail
     */
    score?: number;
    /**
     * 当前指标所得指数
     * @type {number}
     * @memberof FollowupRecordDetail
     */
    index?: number;
}
/**
 * 
 * @export
 * @interface FollowupRecordOptions
 */
export interface FollowupRecordOptions {
    /**
     * 随访设置项ID
     * @type {number}
     * @memberof FollowupRecordOptions
     */
    id?: number;
    /**
     * 随访项名称。如一般情况
     * @type {string}
     * @memberof FollowupRecordOptions
     */
    name?: string;
    /**
     * 随访设置项描述
     * @type {string}
     * @memberof FollowupRecordOptions
     */
    content?: string;
    /**
     * 随访设置项描述图片URL
     * @type {string}
     * @memberof FollowupRecordOptions
     */
    imgUrl?: string;
    /**
     * 是否打开新页面。0 不打开，1 打开
     * @type {number}
     * @memberof FollowupRecordOptions
     */
    openHtml?: number;
    /**
     * 指标或选项类型。1=指标，2=选项
     * @type {number}
     * @memberof FollowupRecordOptions
     */
    optType?: number;
    /**
     * 子随访项
     * @type {Array<FollowupRecordOptionsChildren3>}
     * @memberof FollowupRecordOptions
     */
    children?: Array<FollowupRecordOptionsChildren3>;
}
/**
 * 
 * @export
 * @interface FollowupRecordOptionsChildren
 */
export interface FollowupRecordOptionsChildren {
    /**
     * 
     * @type {number}
     * @memberof FollowupRecordOptionsChildren
     */
    id?: number;
    /**
     * 随访项名称。如是否手术
     * @type {string}
     * @memberof FollowupRecordOptionsChildren
     */
    name?: string;
    /**
     * 随访设置项描述
     * @type {string}
     * @memberof FollowupRecordOptionsChildren
     */
    content?: string;
    /**
     * 随访设置项描述图片URL
     * @type {string}
     * @memberof FollowupRecordOptionsChildren
     */
    imgUrl?: string;
    /**
     * 值填写方式。1 选择，2 输入，3 选择日期
     * @type {number}
     * @memberof FollowupRecordOptionsChildren
     */
    inputType?: number;
    /**
     * 指标或选项类型。1=指标，2=选项
     * @type {number}
     * @memberof FollowupRecordOptionsChildren
     */
    optType?: number;
    /**
     * 是否打开新页面。0 不打开，1 打开
     * @type {number}
     * @memberof FollowupRecordOptionsChildren
     */
    openHtml?: number;
}
/**
 * 
 * @export
 * @interface FollowupRecordOptionsChildren1
 */
export interface FollowupRecordOptionsChildren1 {
    /**
     * 
     * @type {number}
     * @memberof FollowupRecordOptionsChildren1
     */
    id?: number;
    /**
     * 随访项名称。如是否手术
     * @type {string}
     * @memberof FollowupRecordOptionsChildren1
     */
    name?: string;
    /**
     * 随访设置项描述
     * @type {string}
     * @memberof FollowupRecordOptionsChildren1
     */
    content?: string;
    /**
     * 随访设置项描述图片URL
     * @type {string}
     * @memberof FollowupRecordOptionsChildren1
     */
    imgUrl?: string;
    /**
     * 值填写方式。1 选择，2 输入，3 选择日期
     * @type {number}
     * @memberof FollowupRecordOptionsChildren1
     */
    inputType?: number;
    /**
     * 指标或选项类型。1=指标，2=选项
     * @type {number}
     * @memberof FollowupRecordOptionsChildren1
     */
    optType?: number;
    /**
     * 是否打开新页面。0 不打开，1 打开
     * @type {number}
     * @memberof FollowupRecordOptionsChildren1
     */
    openHtml?: number;
    /**
     * 选项列表
     * @type {Array<FollowupRecordOptionsChildren>}
     * @memberof FollowupRecordOptionsChildren1
     */
    children?: Array<FollowupRecordOptionsChildren>;
}
/**
 * 
 * @export
 * @interface FollowupRecordOptionsChildren2
 */
export interface FollowupRecordOptionsChildren2 {
    /**
     * 
     * @type {number}
     * @memberof FollowupRecordOptionsChildren2
     */
    id?: number;
    /**
     * 随访项名称。如是否手术
     * @type {string}
     * @memberof FollowupRecordOptionsChildren2
     */
    name?: string;
    /**
     * 随访设置项描述
     * @type {string}
     * @memberof FollowupRecordOptionsChildren2
     */
    content?: string;
    /**
     * 随访设置项描述图片URL
     * @type {string}
     * @memberof FollowupRecordOptionsChildren2
     */
    imgUrl?: string;
    /**
     * 值填写方式。1 选择，2 输入，3 选择日期
     * @type {number}
     * @memberof FollowupRecordOptionsChildren2
     */
    inputType?: number;
    /**
     * 指标或选项类型。1=指标，2=选项
     * @type {number}
     * @memberof FollowupRecordOptionsChildren2
     */
    optType?: number;
    /**
     * 是否打开新页面。0 不打开，1 打开
     * @type {number}
     * @memberof FollowupRecordOptionsChildren2
     */
    openHtml?: number;
    /**
     * 选项列表
     * @type {Array<FollowupRecordOptionsChildren1>}
     * @memberof FollowupRecordOptionsChildren2
     */
    children?: Array<FollowupRecordOptionsChildren1>;
}
/**
 * 
 * @export
 * @interface FollowupRecordOptionsChildren3
 */
export interface FollowupRecordOptionsChildren3 {
    /**
     * 
     * @type {number}
     * @memberof FollowupRecordOptionsChildren3
     */
    id?: number;
    /**
     * 随访项名称。如手术
     * @type {string}
     * @memberof FollowupRecordOptionsChildren3
     */
    name?: string;
    /**
     * 值填写方式。1 选择，2 输入，3 选择日期
     * @type {number}
     * @memberof FollowupRecordOptionsChildren3
     */
    inputType?: number;
    /**
     * 指标或选项类型。1=指标，2=选项
     * @type {number}
     * @memberof FollowupRecordOptionsChildren3
     */
    optType?: number;
    /**
     * 随访设置项描述
     * @type {string}
     * @memberof FollowupRecordOptionsChildren3
     */
    content?: string;
    /**
     * 随访设置项描述图片URL
     * @type {string}
     * @memberof FollowupRecordOptionsChildren3
     */
    imgUrl?: string;
    /**
     * 是否打开新页面。0 不打开，1 打开
     * @type {number}
     * @memberof FollowupRecordOptionsChildren3
     */
    openHtml?: number;
    /**
     * 下级指标列表
     * @type {Array<FollowupRecordOptionsChildren2>}
     * @memberof FollowupRecordOptionsChildren3
     */
    children?: Array<FollowupRecordOptionsChildren2>;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject
     */
    patientRecordId: number;
    /**
     * 修改原因
     * @type {string}
     * @memberof InlineObject
     */
    reason?: string;
    /**
     * 
     * @type {Array<DoctorAiDiagnosisOptions>}
     * @memberof InlineObject
     */
    options?: Array<DoctorAiDiagnosisOptions>;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject1
     */
    patientRecordId: number;
    /**
     * 
     * @type {Array<DoctorAiDiagnosisOptions>}
     * @memberof InlineObject1
     */
    options?: Array<DoctorAiDiagnosisOptions>;
}
/**
 * 
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     * 患者ID
     * @type {number}
     * @memberof InlineObject10
     */
    id: number;
    /**
     * 手机号码(联系电话)
     * @type {string}
     * @memberof InlineObject10
     */
    phone?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject10
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject10
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject10
     */
    birthday?: string;
    /**
     * 民族
     * @type {string}
     * @memberof InlineObject10
     */
    minzu?: string;
    /**
     * 婚姻状况 0=未婚 1=已婚
     * @type {number}
     * @memberof InlineObject10
     */
    marriage?: number;
    /**
     * 职业
     * @type {string}
     * @memberof InlineObject10
     */
    profession?: string;
    /**
     * 地区
     * @type {string}
     * @memberof InlineObject10
     */
    fromPlace?: string;
    /**
     * 地区层级信息
     * @type {Array<string>}
     * @memberof InlineObject10
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 住址
     * @type {string}
     * @memberof InlineObject10
     */
    address?: string;
    /**
     * 药物过敏
     * @type {string}
     * @memberof InlineObject10
     */
    allergy?: string;
    /**
     * 备注
     * @type {string}
     * @memberof InlineObject10
     */
    remark?: string;
}
/**
 * 
 * @export
 * @interface InlineObject11
 */
export interface InlineObject11 {
    /**
     * 手机号码(联系电话)
     * @type {string}
     * @memberof InlineObject11
     */
    phone: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject11
     */
    truename: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject11
     */
    gender: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject11
     */
    birthday: string;
    /**
     * 民族
     * @type {string}
     * @memberof InlineObject11
     */
    minzu?: string;
    /**
     * 婚姻状况 0=未婚 1=已婚
     * @type {number}
     * @memberof InlineObject11
     */
    marriage?: number;
    /**
     * 职业
     * @type {string}
     * @memberof InlineObject11
     */
    profession?: string;
    /**
     * 地区
     * @type {string}
     * @memberof InlineObject11
     */
    fromPlace?: string;
    /**
     * 地区层级信息
     * @type {Array<string>}
     * @memberof InlineObject11
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 住址
     * @type {string}
     * @memberof InlineObject11
     */
    address?: string;
    /**
     * 药物过敏
     * @type {string}
     * @memberof InlineObject11
     */
    allergy?: string;
    /**
     * 备注
     * @type {string}
     * @memberof InlineObject11
     */
    remark?: string;
}
/**
 * 
 * @export
 * @interface InlineObject12
 */
export interface InlineObject12 {
    /**
     * 推送内容
     * @type {string}
     * @memberof InlineObject12
     */
    content: string;
    /**
     * 患者ID字符串。如：1,2,3
     * @type {string}
     * @memberof InlineObject12
     */
    patientIds: string;
}
/**
 * 
 * @export
 * @interface InlineObject13
 */
export interface InlineObject13 {
    /**
     * 推送内容
     * @type {string}
     * @memberof InlineObject13
     */
    content: string;
    /**
     * 患者ID字符串。如：1,2,3
     * @type {string}
     * @memberof InlineObject13
     */
    patientIds: string;
}
/**
 * 
 * @export
 * @interface InlineObject14
 */
export interface InlineObject14 {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject14
     */
    id: number;
    /**
     * 病类
     * @type {string}
     * @memberof InlineObject14
     */
    diseaseType?: string;
    /**
     * 治疗时间
     * @type {string}
     * @memberof InlineObject14
     */
    treatDate?: string;
    /**
     * 备注
     * @type {string}
     * @memberof InlineObject14
     */
    remark?: string;
}
/**
 * 
 * @export
 * @interface InlineObject15
 */
export interface InlineObject15 {
    /**
     * 患者ID
     * @type {number}
     * @memberof InlineObject15
     */
    patientId: number;
    /**
     * 病类
     * @type {string}
     * @memberof InlineObject15
     */
    diseaseType: string;
    /**
     * 治疗时间
     * @type {string}
     * @memberof InlineObject15
     */
    treatDate: string;
    /**
     * 备注
     * @type {string}
     * @memberof InlineObject15
     */
    remark?: string;
}
/**
 * 
 * @export
 * @interface InlineObject16
 */
export interface InlineObject16 {
    /**
     * 新手机号码
     * @type {string}
     * @memberof InlineObject16
     */
    phone: string;
    /**
     * 手机验证码
     * @type {string}
     * @memberof InlineObject16
     */
    smsCaptcha: string;
}
/**
 * 
 * @export
 * @interface InlineObject17
 */
export interface InlineObject17 {
    /**
     * 提醒ID
     * @type {number}
     * @memberof InlineObject17
     */
    id: number;
    /**
     * 事件类型 1=复诊 2=随访
     * @type {number}
     * @memberof InlineObject17
     */
    remindType: number;
    /**
     * 提醒日期
     * @type {Array<string>}
     * @memberof InlineObject17
     */
    remindDates: Array<string>;
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject17
     */
    patientRecordId: number;
}
/**
 * 
 * @export
 * @interface InlineObject18
 */
export interface InlineObject18 {
    /**
     * 事件类型 1=复诊 2=随访
     * @type {number}
     * @memberof InlineObject18
     */
    remindType: number;
    /**
     * 提醒日期
     * @type {Array<string>}
     * @memberof InlineObject18
     */
    remindDates: Array<string>;
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject18
     */
    patientRecordId: number;
}
/**
 * 
 * @export
 * @interface InlineObject19
 */
export interface InlineObject19 {
    /**
     * 账号
     * @type {string}
     * @memberof InlineObject19
     */
    account: string;
    /**
     * 密码
     * @type {string}
     * @memberof InlineObject19
     */
    password: string;
    /**
     * 图片验证码client_code
     * @type {string}
     * @memberof InlineObject19
     */
    clientCode: string;
    /**
     * 图片验证码实际内容
     * @type {string}
     * @memberof InlineObject19
     */
    imageCaptcha: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject2
     */
    patientRecordId: number;
    /**
     * 文本内容
     * @type {string}
     * @memberof InlineObject2
     */
    textContent?: string;
    /**
     * 图片URL
     * @type {string}
     * @memberof InlineObject2
     */
    imageUrl?: string;
}
/**
 * 
 * @export
 * @interface InlineObject20
 */
export interface InlineObject20 {
    /**
     * 管理员ID
     * @type {number}
     * @memberof InlineObject20
     */
    id: number;
    /**
     * 登录账号
     * @type {string}
     * @memberof InlineObject20
     */
    account?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject20
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject20
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject20
     */
    birthday?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject20
     */
    phone?: string;
    /**
     * 所属单位
     * @type {string}
     * @memberof InlineObject20
     */
    institution?: string;
    /**
     * 头像链接
     * @type {string}
     * @memberof InlineObject20
     */
    avatar?: string;
    /**
     * 1=启用 0=禁用
     * @type {number}
     * @memberof InlineObject20
     */
    status?: number;
}
/**
 * 
 * @export
 * @interface InlineObject21
 */
export interface InlineObject21 {
    /**
     * 登录账号
     * @type {string}
     * @memberof InlineObject21
     */
    account: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject21
     */
    truename: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject21
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject21
     */
    birthday?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject21
     */
    phone: string;
    /**
     * 所属单位
     * @type {string}
     * @memberof InlineObject21
     */
    institution?: string;
    /**
     * 头像链接
     * @type {string}
     * @memberof InlineObject21
     */
    avatar?: string;
    /**
     * 1=启用 0=禁用
     * @type {number}
     * @memberof InlineObject21
     */
    status?: number;
}
/**
 * 
 * @export
 * @interface InlineObject22
 */
export interface InlineObject22 {
    /**
     * 医生ID
     * @type {number}
     * @memberof InlineObject22
     */
    id: number;
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject22
     */
    phone?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject22
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject22
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject22
     */
    birthday?: string;
    /**
     * 来自地区
     * @type {string}
     * @memberof InlineObject22
     */
    fromPlace?: string;
    /**
     * 来自地区(层级数据)
     * @type {Array<string>}
     * @memberof InlineObject22
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 工作医院
     * @type {string}
     * @memberof InlineObject22
     */
    hospitalName?: string;
    /**
     * 工作科室
     * @type {string}
     * @memberof InlineObject22
     */
    majorName?: string;
    /**
     * 职称
     * @type {string}
     * @memberof InlineObject22
     */
    titleName?: string;
    /**
     * 相关证件
     * @type {Array<string>}
     * @memberof InlineObject22
     */
    certPics?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineObject23
 */
export interface InlineObject23 {
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject23
     */
    phone: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject23
     */
    truename: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject23
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject23
     */
    birthday?: string;
    /**
     * 来自地区
     * @type {string}
     * @memberof InlineObject23
     */
    fromPlace?: string;
    /**
     * 来自地区(层级数据)
     * @type {Array<string>}
     * @memberof InlineObject23
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 工作医院
     * @type {string}
     * @memberof InlineObject23
     */
    hospitalName: string;
    /**
     * 工作科室
     * @type {string}
     * @memberof InlineObject23
     */
    majorName?: string;
    /**
     * 职称
     * @type {string}
     * @memberof InlineObject23
     */
    titleName?: string;
    /**
     * 相关证件
     * @type {Array<string>}
     * @memberof InlineObject23
     */
    certPics?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineObject24
 */
export interface InlineObject24 {
    /**
     * 医生ID
     * @type {number}
     * @memberof InlineObject24
     */
    doctorId: number;
    /**
     * 审核结果 1=通过 -1=驳回
     * @type {number}
     * @memberof InlineObject24
     */
    verifyState: number;
    /**
     * 驳回原因
     * @type {string}
     * @memberof InlineObject24
     */
    rejectReason?: string;
}
/**
 * 
 * @export
 * @interface InlineObject25
 */
export interface InlineObject25 {
    /**
     * 知识库ID
     * @type {number}
     * @memberof InlineObject25
     */
    id: number;
    /**
     * 标题
     * @type {string}
     * @memberof InlineObject25
     */
    title?: string;
    /**
     * 分类
     * @type {string}
     * @memberof InlineObject25
     */
    knowledgeType?: string;
    /**
     * 内容
     * @type {string}
     * @memberof InlineObject25
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface InlineObject26
 */
export interface InlineObject26 {
    /**
     * 标题
     * @type {string}
     * @memberof InlineObject26
     */
    title: string;
    /**
     * 分类
     * @type {string}
     * @memberof InlineObject26
     */
    knowledgeType: string;
    /**
     * 内容
     * @type {string}
     * @memberof InlineObject26
     */
    content: string;
}
/**
 * 
 * @export
 * @interface InlineObject27
 */
export interface InlineObject27 {
    /**
     * 知识库ID列表
     * @type {Array<number>}
     * @memberof InlineObject27
     */
    ids?: Array<number>;
}
/**
 * 
 * @export
 * @interface InlineObject28
 */
export interface InlineObject28 {
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject28
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject28
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject28
     */
    birthday?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject28
     */
    phone?: string;
    /**
     * 所属单位
     * @type {string}
     * @memberof InlineObject28
     */
    institution?: string;
    /**
     * 头像链接
     * @type {string}
     * @memberof InlineObject28
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface InlineObject29
 */
export interface InlineObject29 {
    /**
     * 原密码
     * @type {string}
     * @memberof InlineObject29
     */
    oldPassword?: string;
    /**
     * 新密码
     * @type {string}
     * @memberof InlineObject29
     */
    newPassword?: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 随访ID
     * @type {number}
     * @memberof InlineObject3
     */
    id: number;
    /**
     * 随访日期
     * @type {string}
     * @memberof InlineObject3
     */
    visitDate: string;
    /**
     * 随访详情(JSON格式)
     * @type {Array<FollowupRecordDetail>}
     * @memberof InlineObject3
     */
    followupDetail: Array<FollowupRecordDetail>;
    /**
     * 附件
     * @type {Array<string>}
     * @memberof InlineObject3
     */
    attachment?: Array<string>;
    /**
     * 备注
     * @type {string}
     * @memberof InlineObject3
     */
    remark?: string;
}
/**
 * 
 * @export
 * @interface InlineObject30
 */
export interface InlineObject30 {
    /**
     * 管理员ID
     * @type {number}
     * @memberof InlineObject30
     */
    adminId?: number;
}
/**
 * 
 * @export
 * @interface InlineObject31
 */
export interface InlineObject31 {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject31
     */
    patientRecordId: number;
    /**
     * 文本内容
     * @type {string}
     * @memberof InlineObject31
     */
    textContent?: string;
    /**
     * 图片URL
     * @type {string}
     * @memberof InlineObject31
     */
    imageUrl?: string;
}
/**
 * 
 * @export
 * @interface InlineObject32
 */
export interface InlineObject32 {
    /**
     * 用户信息的加密文本
     * @type {string}
     * @memberof InlineObject32
     */
    encryptedInfo?: string;
    /**
     * 用户信息加密的初始向量
     * @type {string}
     * @memberof InlineObject32
     */
    ivInfo?: string;
}
/**
 * 
 * @export
 * @interface InlineObject33
 */
export interface InlineObject33 {
    /**
     * 新手机号码
     * @type {string}
     * @memberof InlineObject33
     */
    phone: string;
    /**
     * 手机验证码
     * @type {string}
     * @memberof InlineObject33
     */
    smsCaptcha: string;
}
/**
 * 
 * @export
 * @interface InlineObject34
 */
export interface InlineObject34 {
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject34
     */
    phone?: string;
    /**
     * 短信验证码
     * @type {string}
     * @memberof InlineObject34
     */
    smsCaptcha?: string;
    /**
     * 小程序code
     * @type {string}
     * @memberof InlineObject34
     */
    wxcode: string;
}
/**
 * 
 * @export
 * @interface InlineObject35
 */
export interface InlineObject35 {
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject35
     */
    phone?: string;
    /**
     * 短信验证码
     * @type {string}
     * @memberof InlineObject35
     */
    smsCaptcha?: string;
    /**
     * 小程序code
     * @type {string}
     * @memberof InlineObject35
     */
    wxcode: string;
}
/**
 * 
 * @export
 * @interface InlineObject36
 */
export interface InlineObject36 {
    /**
     * 管理员账号
     * @type {string}
     * @memberof InlineObject36
     */
    account: string;
    /**
     * 短信验证码内容
     * @type {string}
     * @memberof InlineObject36
     */
    smsCaptcha?: string;
    /**
     * 1=发送短信验证码 0或不传=提交设置密码
     * @type {number}
     * @memberof InlineObject36
     */
    sendSms?: number;
    /**
     * 新密码
     * @type {string}
     * @memberof InlineObject36
     */
    newPassword?: string;
}
/**
 * 
 * @export
 * @interface InlineObject37
 */
export interface InlineObject37 {
    /**
     * 手机号码
     * @type {string}
     * @memberof InlineObject37
     */
    phone: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject37
     */
    truename: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject37
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject37
     */
    birthday?: string;
    /**
     * 来自地区
     * @type {string}
     * @memberof InlineObject37
     */
    fromPlace?: string;
    /**
     * 来自地区(层级数据)
     * @type {Array<string>}
     * @memberof InlineObject37
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 工作医院
     * @type {string}
     * @memberof InlineObject37
     */
    hospitalName: string;
    /**
     * 工作科室
     * @type {string}
     * @memberof InlineObject37
     */
    majorName?: string;
    /**
     * 职称
     * @type {string}
     * @memberof InlineObject37
     */
    titleName?: string;
    /**
     * 相关证件
     * @type {Array<string>}
     * @memberof InlineObject37
     */
    certPics?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineObject38
 */
export interface InlineObject38 {
    /**
     * 电话号码
     * @type {string}
     * @memberof InlineObject38
     */
    phone: string;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject4
     */
    patientRecordId: number;
    /**
     * 随访日期
     * @type {string}
     * @memberof InlineObject4
     */
    visitDate: string;
    /**
     * 随访详情(JSON格式)
     * @type {Array<FollowupRecordDetail>}
     * @memberof InlineObject4
     */
    followupDetail: Array<FollowupRecordDetail>;
    /**
     * 附件
     * @type {Array<string>}
     * @memberof InlineObject4
     */
    attachment?: Array<string>;
    /**
     * 备注
     * @type {string}
     * @memberof InlineObject4
     */
    remark?: string;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 评分数据项(JSON格式)
     * @type {Array<FollowupRecordDetail>}
     * @memberof InlineObject5
     */
    followupDetail?: Array<FollowupRecordDetail>;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 知识库ID
     * @type {number}
     * @memberof InlineObject6
     */
    knowledgeId: number;
    /**
     * 1=收藏 0=取消收藏
     * @type {number}
     * @memberof InlineObject6
     */
    favorite: number;
}
/**
 * 
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * 真实姓名
     * @type {string}
     * @memberof InlineObject7
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof InlineObject7
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof InlineObject7
     */
    birthday?: string;
    /**
     * 来自地区
     * @type {string}
     * @memberof InlineObject7
     */
    fromPlace?: string;
    /**
     * 来自地区(层级数据)
     * @type {Array<string>}
     * @memberof InlineObject7
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 工作医院
     * @type {string}
     * @memberof InlineObject7
     */
    hospitalName?: string;
    /**
     * 工作科室
     * @type {string}
     * @memberof InlineObject7
     */
    majorName?: string;
    /**
     * 职称
     * @type {string}
     * @memberof InlineObject7
     */
    titleName?: string;
    /**
     * 相关证件
     * @type {Array<string>}
     * @memberof InlineObject7
     */
    certPics?: Array<string>;
    /**
     * 头像链接
     * @type {string}
     * @memberof InlineObject7
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     * 就诊记录ID
     * @type {number}
     * @memberof InlineObject8
     */
    id: number;
    /**
     * 就诊时间
     * @type {string}
     * @memberof InlineObject8
     */
    visitDate: string;
    /**
     * 图像资料
     * @type {Array<string>}
     * @memberof InlineObject8
     */
    images?: Array<string>;
    /**
     * 主诉
     * @type {string}
     * @memberof InlineObject8
     */
    chiefComplaint?: string;
    /**
     * 病史
     * @type {string}
     * @memberof InlineObject8
     */
    anamnesis?: string;
    /**
     * 体格检查
     * @type {string}
     * @memberof InlineObject8
     */
    bodyExamination?: string;
    /**
     * 辅助检查
     * @type {string}
     * @memberof InlineObject8
     */
    assistExamination?: string;
    /**
     * 诊断
     * @type {string}
     * @memberof InlineObject8
     */
    diagnosis?: string;
    /**
     * 治疗措施
     * @type {string}
     * @memberof InlineObject8
     */
    treatment?: string;
}
/**
 * 
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineObject9
     */
    patientRecordId: number;
    /**
     * 就诊时间
     * @type {string}
     * @memberof InlineObject9
     */
    visitDate: string;
    /**
     * 图像资料
     * @type {Array<string>}
     * @memberof InlineObject9
     */
    images?: Array<string>;
    /**
     * 主诉
     * @type {string}
     * @memberof InlineObject9
     */
    chiefComplaint?: string;
    /**
     * 病史
     * @type {string}
     * @memberof InlineObject9
     */
    anamnesis?: string;
    /**
     * 体格检查
     * @type {string}
     * @memberof InlineObject9
     */
    bodyExamination?: string;
    /**
     * 辅助检查
     * @type {string}
     * @memberof InlineObject9
     */
    assistExamination?: string;
    /**
     * 诊断
     * @type {string}
     * @memberof InlineObject9
     */
    diagnosis?: string;
    /**
     * 治疗措施
     * @type {string}
     * @memberof InlineObject9
     */
    treatment?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<AiDiagnosisOption>}
     * @memberof InlineResponse200
     */
    treatmentTlics?: Array<AiDiagnosisOption>;
    /**
     * 
     * @type {Array<AiDiagnosisOption>}
     * @memberof InlineResponse200
     */
    treatmentTlaosis?: Array<AiDiagnosisOption>;
    /**
     * 
     * @type {Array<AiDiagnosisOption>}
     * @memberof InlineResponse200
     */
    operationTlics?: Array<AiDiagnosisOption>;
    /**
     * 
     * @type {Array<AiDiagnosisOption>}
     * @memberof InlineResponse200
     */
    operationLsc?: Array<AiDiagnosisOption>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    pages?: number;
    /**
     * 
     * @type {Array<InlineResponse2001List>}
     * @memberof InlineResponse2001
     */
    list?: Array<InlineResponse2001List>;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    pages?: number;
    /**
     * 
     * @type {Array<DoctorMsg>}
     * @memberof InlineResponse20010
     */
    list?: Array<DoctorMsg>;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 未读消息数
     * @type {number}
     * @memberof InlineResponse20011
     */
    unReadNum?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    pages?: number;
    /**
     * 
     * @type {Array<Patient>}
     * @memberof InlineResponse20012
     */
    list?: Array<Patient>;
}
/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 患者ID
     * @type {number}
     * @memberof InlineResponse20013
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    pages?: number;
    /**
     * 
     * @type {Array<InlineResponse20014List>}
     * @memberof InlineResponse20014
     */
    list?: Array<InlineResponse20014List>;
}
/**
 * 
 * @export
 * @interface InlineResponse20014List
 */
export interface InlineResponse20014List {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineResponse20014List
     */
    id?: number;
    /**
     * 病类
     * @type {string}
     * @memberof InlineResponse20014List
     */
    diseaseType?: string;
    /**
     * 治疗时间
     * @type {string}
     * @memberof InlineResponse20014List
     */
    treatDate?: string;
    /**
     * 备注
     * @type {string}
     * @memberof InlineResponse20014List
     */
    remark?: string;
    /**
     * 医生是否有未读聊天 1=是 0=否
     * @type {number}
     * @memberof InlineResponse20014List
     */
    doctorUnreadChat?: number;
    /**
     * 患者姓名
     * @type {string}
     * @memberof InlineResponse20014List
     */
    truename?: string;
    /**
     * 患者性别 1=男 2=女
     * @type {number}
     * @memberof InlineResponse20014List
     */
    gender?: number;
    /**
     * 患者年龄
     * @type {number}
     * @memberof InlineResponse20014List
     */
    age?: number;
    /**
     * 患者头像
     * @type {string}
     * @memberof InlineResponse20014List
     */
    patientAvatar?: string;
    /**
     * 患者ID
     * @type {number}
     * @memberof InlineResponse20014List
     */
    patientId?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    pages?: number;
    /**
     * 
     * @type {Array<DoctorReminderDetailVo>}
     * @memberof InlineResponse20015
     */
    list?: Array<DoctorReminderDetailVo>;
}
/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016
     */
    accessKeyId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016
     */
    signature?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016
     */
    expire?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016
     */
    host?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016
     */
    dir?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016
     */
    policy?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * 登录token
     * @type {string}
     * @memberof InlineResponse20017
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    pages?: number;
    /**
     * 
     * @type {Array<Admin>}
     * @memberof InlineResponse20018
     */
    list?: Array<Admin>;
}
/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    pages?: number;
    /**
     * 
     * @type {Array<AdminMsgDetail>}
     * @memberof InlineResponse20019
     */
    list?: Array<AdminMsgDetail>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001List
 */
export interface InlineResponse2001List {
    /**
     * 沟通记录ID
     * @type {number}
     * @memberof InlineResponse2001List
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineResponse2001List
     */
    patientRecordId?: number;
    /**
     * 文本内容
     * @type {string}
     * @memberof InlineResponse2001List
     */
    textContent?: string;
    /**
     * 图片URL
     * @type {string}
     * @memberof InlineResponse2001List
     */
    imageUrl?: string;
    /**
     * 1=医生发言 0=患者发言
     * @type {number}
     * @memberof InlineResponse2001List
     */
    fromDoctor?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof InlineResponse2001List
     */
    createdAt?: string;
    /**
     * 患者ID
     * @type {number}
     * @memberof InlineResponse2001List
     */
    patientId?: number;
    /**
     * 医生ID
     * @type {number}
     * @memberof InlineResponse2001List
     */
    doctorId?: number;
    /**
     * 医生昵称
     * @type {string}
     * @memberof InlineResponse2001List
     */
    doctorName?: string;
    /**
     * 医生头像URL
     * @type {string}
     * @memberof InlineResponse2001List
     */
    doctorAvatar?: string;
    /**
     * 患者名称
     * @type {string}
     * @memberof InlineResponse2001List
     */
    patientName?: string;
    /**
     * 患者头像URL
     * @type {string}
     * @memberof InlineResponse2001List
     */
    patientAvatar?: string;
    /**
     * 医生性别 1=男 2=女
     * @type {number}
     * @memberof InlineResponse2001List
     */
    doctorGender?: number;
    /**
     * 患者性别 1=男 2=女
     * @type {number}
     * @memberof InlineResponse2001List
     */
    patientGender?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    pages?: number;
    /**
     * 
     * @type {Array<FollowupRecord>}
     * @memberof InlineResponse2002
     */
    list?: Array<FollowupRecord>;
}
/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * 管理员消息ID
     * @type {number}
     * @memberof InlineResponse20020
     */
    id?: number;
    /**
     * 消息类型： 医生注册消息，系统消息
     * @type {string}
     * @memberof InlineResponse20020
     */
    msgType?: string;
    /**
     * 消息内容
     * @type {string}
     * @memberof InlineResponse20020
     */
    content?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof InlineResponse20020
     */
    createdAt?: string;
    /**
     * 是否已读。0 未读，1 已读
     * @type {number}
     * @memberof InlineResponse20020
     */
    readFlag?: number;
    /**
     * 阅读时间
     * @type {string}
     * @memberof InlineResponse20020
     */
    readedAt?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20021
     */
    pages?: number;
    /**
     * 
     * @type {Array<Doctor>}
     * @memberof InlineResponse20021
     */
    list?: Array<Doctor>;
}
/**
 * 
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20022
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20022
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20022
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20022
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20022
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20022
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20022
     */
    pages?: number;
    /**
     * 
     * @type {Array<PatientRecord>}
     * @memberof InlineResponse20022
     */
    list?: Array<PatientRecord>;
}
/**
 * 
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20023
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20023
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20023
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20023
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20023
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20023
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20023
     */
    pages?: number;
    /**
     * 
     * @type {Array<PatientMsg>}
     * @memberof InlineResponse20023
     */
    list?: Array<PatientMsg>;
}
/**
 * 
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20024
     */
    pages?: number;
    /**
     * 
     * @type {Array<InlineResponse20024List>}
     * @memberof InlineResponse20024
     */
    list?: Array<InlineResponse20024List>;
}
/**
 * 
 * @export
 * @interface InlineResponse20024List
 */
export interface InlineResponse20024List {
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineResponse20024List
     */
    id?: number;
    /**
     * 患者ID
     * @type {number}
     * @memberof InlineResponse20024List
     */
    patientId?: number;
    /**
     * 治疗时间
     * @type {string}
     * @memberof InlineResponse20024List
     */
    treatDate?: string;
    /**
     * 患者是否有未读聊天 1=是 0=否
     * @type {number}
     * @memberof InlineResponse20024List
     */
    patientUnreadChat?: number;
    /**
     * 医院名称
     * @type {string}
     * @memberof InlineResponse20024List
     */
    hospitalName?: string;
    /**
     * 医生ID
     * @type {number}
     * @memberof InlineResponse20024List
     */
    doctorId?: number;
    /**
     * 医生名称
     * @type {string}
     * @memberof InlineResponse20024List
     */
    doctorName?: string;
    /**
     * 医生头像
     * @type {string}
     * @memberof InlineResponse20024List
     */
    doctorAvatar?: string;
    /**
     * 医生性别
     * @type {number}
     * @memberof InlineResponse20024List
     */
    doctorGender?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
    /**
     * 登录token
     * @type {string}
     * @memberof InlineResponse20025
     */
    token?: string;
    /**
     * 是否需要输入手机号 1=是 0=否
     * @type {number}
     * @memberof InlineResponse20025
     */
    needPhone?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * Oswestry功能障碍指数评分
     * @type {number}
     * @memberof InlineResponse2003
     */
    oswestryScore?: number;
    /**
     * 腰椎JOA评分
     * @type {number}
     * @memberof InlineResponse2003
     */
    joaScore?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 随访ID
     * @type {number}
     * @memberof InlineResponse2004
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineResponse2004
     */
    patientRecordId?: number;
    /**
     * 随访日期
     * @type {string}
     * @memberof InlineResponse2004
     */
    visitDate?: string;
    /**
     * 随访详情(JSON格式)
     * @type {Array<FollowupRecordDetail>}
     * @memberof InlineResponse2004
     */
    followupDetail?: Array<FollowupRecordDetail>;
    /**
     * 附件
     * @type {Array<string>}
     * @memberof InlineResponse2004
     */
    attachment?: Array<string>;
    /**
     * 备注
     * @type {string}
     * @memberof InlineResponse2004
     */
    remark?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof InlineResponse2004
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof InlineResponse2004
     */
    updatedAt?: string;
    /**
     * Oswestry功能障碍指数评分
     * @type {number}
     * @memberof InlineResponse2004
     */
    oswestryScore?: number;
    /**
     * 腰椎JOA评分
     * @type {number}
     * @memberof InlineResponse2004
     */
    joaScore?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 患者数量(病例关联的患者数量，去重)
     * @type {number}
     * @memberof InlineResponse2005
     */
    patientNum?: number;
    /**
     * 病例数量
     * @type {number}
     * @memberof InlineResponse2005
     */
    patientRecordNum?: number;
    /**
     * 随访记录数量
     * @type {number}
     * @memberof InlineResponse2005
     */
    followupRecordNum?: number;
    /**
     * 就诊记录数量
     * @type {number}
     * @memberof InlineResponse2005
     */
    medicalRecordNum?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    pages?: number;
    /**
     * 
     * @type {Array<Knowledge>}
     * @memberof InlineResponse2006
     */
    list?: Array<Knowledge>;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 知识库ID
     * @type {number}
     * @memberof InlineResponse2007
     */
    id?: number;
    /**
     * 标题
     * @type {string}
     * @memberof InlineResponse2007
     */
    title?: string;
    /**
     * 分类
     * @type {string}
     * @memberof InlineResponse2007
     */
    knowledgeType?: string;
    /**
     * 发布人ID
     * @type {number}
     * @memberof InlineResponse2007
     */
    publisherId?: number;
    /**
     * 发布人姓名
     * @type {string}
     * @memberof InlineResponse2007
     */
    publisherName?: string;
    /**
     * 发布人头像
     * @type {string}
     * @memberof InlineResponse2007
     */
    publisherAvatar?: string;
    /**
     * 内容
     * @type {string}
     * @memberof InlineResponse2007
     */
    content?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof InlineResponse2007
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof InlineResponse2007
     */
    updatedAt?: string;
    /**
     * 是否已收藏 1=是 0=否
     * @type {number}
     * @memberof InlineResponse2007
     */
    favorite?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    pages?: number;
    /**
     * 
     * @type {Array<MedicalRecord>}
     * @memberof InlineResponse2008
     */
    list?: Array<MedicalRecord>;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 就诊记录ID
     * @type {number}
     * @memberof InlineResponse2009
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof InlineResponse2009
     */
    patientRecordId?: number;
    /**
     * 就诊时间
     * @type {string}
     * @memberof InlineResponse2009
     */
    visitDate?: string;
    /**
     * 图像资料
     * @type {Array<string>}
     * @memberof InlineResponse2009
     */
    images?: Array<string>;
    /**
     * 主诉
     * @type {string}
     * @memberof InlineResponse2009
     */
    chiefComplaint?: string;
    /**
     * 病史
     * @type {string}
     * @memberof InlineResponse2009
     */
    anamnesis?: string;
    /**
     * 体格检查
     * @type {string}
     * @memberof InlineResponse2009
     */
    bodyExamination?: string;
    /**
     * 辅助检查
     * @type {string}
     * @memberof InlineResponse2009
     */
    assistExamination?: string;
    /**
     * 诊断
     * @type {string}
     * @memberof InlineResponse2009
     */
    diagnosis?: string;
    /**
     * 治疗措施
     * @type {string}
     * @memberof InlineResponse2009
     */
    treatment?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof InlineResponse2009
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof InlineResponse2009
     */
    updatedAt?: string;
    /**
     * 就诊编号
     * @type {string}
     * @memberof InlineResponse2009
     */
    medicalRecordNumber?: string;
}
/**
 * 
 * @export
 * @interface Knowledge
 */
export interface Knowledge {
    /**
     * 知识库ID
     * @type {number}
     * @memberof Knowledge
     */
    id?: number;
    /**
     * 标题
     * @type {string}
     * @memberof Knowledge
     */
    title?: string;
    /**
     * 分类
     * @type {string}
     * @memberof Knowledge
     */
    knowledgeType?: string;
    /**
     * 发布人ID
     * @type {number}
     * @memberof Knowledge
     */
    publisherId?: number;
    /**
     * 发布人姓名
     * @type {string}
     * @memberof Knowledge
     */
    publisherName?: string;
    /**
     * 发布人头像
     * @type {string}
     * @memberof Knowledge
     */
    publisherAvatar?: string;
    /**
     * 内容
     * @type {string}
     * @memberof Knowledge
     */
    content?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof Knowledge
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof Knowledge
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface KnowledgeFavorite
 */
export interface KnowledgeFavorite {
    /**
     * 知识库收藏关系ID
     * @type {number}
     * @memberof KnowledgeFavorite
     */
    id?: number;
    /**
     * 医生ID
     * @type {number}
     * @memberof KnowledgeFavorite
     */
    doctorId?: number;
    /**
     * 知识库ID
     * @type {number}
     * @memberof KnowledgeFavorite
     */
    knowledgeId?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof KnowledgeFavorite
     */
    createdAt?: string;
}
/**
 * 
 * @export
 * @interface MedicalRecord
 */
export interface MedicalRecord {
    /**
     * 就诊记录ID
     * @type {number}
     * @memberof MedicalRecord
     */
    id?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof MedicalRecord
     */
    patientRecordId?: number;
    /**
     * 就诊时间
     * @type {string}
     * @memberof MedicalRecord
     */
    visitDate?: string;
    /**
     * 图像资料
     * @type {Array<string>}
     * @memberof MedicalRecord
     */
    images?: Array<string>;
    /**
     * 主诉
     * @type {string}
     * @memberof MedicalRecord
     */
    chiefComplaint?: string;
    /**
     * 病史
     * @type {string}
     * @memberof MedicalRecord
     */
    anamnesis?: string;
    /**
     * 体格检查
     * @type {string}
     * @memberof MedicalRecord
     */
    bodyExamination?: string;
    /**
     * 辅助检查
     * @type {string}
     * @memberof MedicalRecord
     */
    assistExamination?: string;
    /**
     * 诊断
     * @type {string}
     * @memberof MedicalRecord
     */
    diagnosis?: string;
    /**
     * 治疗措施
     * @type {string}
     * @memberof MedicalRecord
     */
    treatment?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof MedicalRecord
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof MedicalRecord
     */
    updatedAt?: string;
    /**
     * 就诊编号
     * @type {string}
     * @memberof MedicalRecord
     */
    medicalRecordNumber?: string;
}
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 患者ID
     * @type {number}
     * @memberof Patient
     */
    id?: number;
    /**
     * 手机号码(联系电话)
     * @type {string}
     * @memberof Patient
     */
    phone?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof Patient
     */
    truename?: string;
    /**
     * 性别 1=男 2=女
     * @type {number}
     * @memberof Patient
     */
    gender?: number;
    /**
     * 出生日期
     * @type {string}
     * @memberof Patient
     */
    birthday?: string;
    /**
     * 民族
     * @type {string}
     * @memberof Patient
     */
    minzu?: string;
    /**
     * 婚姻状况 0=未婚 1=已婚
     * @type {number}
     * @memberof Patient
     */
    marriage?: number;
    /**
     * 职业
     * @type {string}
     * @memberof Patient
     */
    profession?: string;
    /**
     * 地区
     * @type {string}
     * @memberof Patient
     */
    fromPlace?: string;
    /**
     * 地区层级信息
     * @type {Array<string>}
     * @memberof Patient
     */
    fromPlaceRaw?: Array<string>;
    /**
     * 住址
     * @type {string}
     * @memberof Patient
     */
    address?: string;
    /**
     * 药物过敏
     * @type {string}
     * @memberof Patient
     */
    allergy?: string;
    /**
     * 备注
     * @type {string}
     * @memberof Patient
     */
    remark?: string;
    /**
     * 患者头像
     * @type {string}
     * @memberof Patient
     */
    avatar?: string;
    /**
     * 创建患者的医生ID
     * @type {number}
     * @memberof Patient
     */
    doctorId?: number;
    /**
     * 创建患者的医生姓名
     * @type {string}
     * @memberof Patient
     */
    doctorName?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof Patient
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof Patient
     */
    updatedAt?: string;
    /**
     * 患者年龄
     * @type {number}
     * @memberof Patient
     */
    age?: number;
}
/**
 * 
 * @export
 * @interface PatientMsg
 */
export interface PatientMsg {
    /**
     * 管理员消息ID
     * @type {number}
     * @memberof PatientMsg
     */
    id?: number;
    /**
     * 患者ID
     * @type {number}
     * @memberof PatientMsg
     */
    patientId?: number;
    /**
     * 消息内容
     * @type {string}
     * @memberof PatientMsg
     */
    content?: string;
    /**
     * 是否已读 1=已读 0=未读
     * @type {number}
     * @memberof PatientMsg
     */
    read?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof PatientMsg
     */
    createdAt?: string;
}
/**
 * 
 * @export
 * @interface PatientRecord
 */
export interface PatientRecord {
    /**
     * 病例ID
     * @type {number}
     * @memberof PatientRecord
     */
    id?: number;
    /**
     * 医生ID
     * @type {number}
     * @memberof PatientRecord
     */
    doctorId?: number;
    /**
     * 患者ID
     * @type {number}
     * @memberof PatientRecord
     */
    patientId?: number;
    /**
     * 病类
     * @type {string}
     * @memberof PatientRecord
     */
    diseaseType?: string;
    /**
     * 治疗时间
     * @type {string}
     * @memberof PatientRecord
     */
    treatDate?: string;
    /**
     * 备注
     * @type {string}
     * @memberof PatientRecord
     */
    remark?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof PatientRecord
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof PatientRecord
     */
    updatedAt?: string;
    /**
     * 病例编号
     * @type {string}
     * @memberof PatientRecord
     */
    patientRecordNumber?: string;
    /**
     * 患者是否有未读聊天 1=是 0=否
     * @type {number}
     * @memberof PatientRecord
     */
    patientUnreadChat?: number;
    /**
     * 医生是否有未读聊天 1=是 0=否
     * @type {number}
     * @memberof PatientRecord
     */
    doctorUnreadChat?: number;
    /**
     * 是否手术 1=是 0=否
     * @type {number}
     * @memberof PatientRecord
     */
    operation?: number;
    /**
     * 患者姓名
     * @type {string}
     * @memberof PatientRecord
     */
    patientName?: string;
    /**
     * 医院名称
     * @type {string}
     * @memberof PatientRecord
     */
    hospitalName?: string;
    /**
     * 医生名称
     * @type {string}
     * @memberof PatientRecord
     */
    doctorName?: string;
    /**
     * tlaosis分数
     * @type {number}
     * @memberof PatientRecord
     */
    tlaosis?: number;
    /**
     * tlics分数
     * @type {number}
     * @memberof PatientRecord
     */
    tlics?: number;
    /**
     * lsc分数
     * @type {number}
     * @memberof PatientRecord
     */
    lsc?: number;
}
/**
 * 
 * @export
 * @interface Reminder
 */
export interface Reminder {
    /**
     * 提醒ID
     * @type {number}
     * @memberof Reminder
     */
    id?: number;
    /**
     * 事件类型 1=复诊 2=随访
     * @type {number}
     * @memberof Reminder
     */
    remindType?: number;
    /**
     * 病例ID
     * @type {number}
     * @memberof Reminder
     */
    patientRecordId?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof Reminder
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof Reminder
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface ReminderTime
 */
export interface ReminderTime {
    /**
     * 提醒日期ID
     * @type {number}
     * @memberof ReminderTime
     */
    id?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof ReminderTime
     */
    createdAt?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof ReminderTime
     */
    updatedAt?: string;
    /**
     * 提醒记录ID
     * @type {number}
     * @memberof ReminderTime
     */
    reminderId?: number;
    /**
     * 提醒日期
     * @type {string}
     * @memberof ReminderTime
     */
    remindDate?: string;
    /**
     * 是否已提醒。0 未提醒，1 已提醒
     * @type {number}
     * @memberof ReminderTime
     */
    remindFlag?: number;
}
/**
 * 
 * @export
 * @interface TypesItem
 */
export interface TypesItem {
    /**
     * ID
     * @type {number}
     * @memberof TypesItem
     */
    id?: number;
    /**
     * 选项值
     * @type {string}
     * @memberof TypesItem
     */
    value?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量删除管理员消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminMsg: async (msgIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'msgIds' is not null or undefined
            if (msgIds === null || msgIds === undefined) {
                throw new RequiredError('msgIds','Required parameter msgIds was null or undefined when calling deleteAdminMsg.');
            }
            const localVarPath = `/mgr/admin/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (msgIds !== undefined) {
                localVarQueryParameter['msgIds'] = msgIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量删除消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorMsg: async (msgIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'msgIds' is not null or undefined
            if (msgIds === null || msgIds === undefined) {
                throw new RequiredError('msgIds','Required parameter msgIds was null or undefined when calling deleteDoctorMsg.');
            }
            const localVarPath = `/doctor/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (msgIds !== undefined) {
                localVarQueryParameter['msgIds'] = msgIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生删除患者
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorPatientId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDoctorPatientId.');
            }
            const localVarPath = `/doctor/patient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生删除病例
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorPatientRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDoctorPatientRecordId.');
            }
            const localVarPath = `/doctor/patientRecord/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生删除提醒
         * @param {number} id 提醒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorReminderId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDoctorReminderId.');
            }
            const localVarPath = `/doctor/reminder/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除随访记录
         * @param {number} id 随访记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollowupRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteFollowupRecordId.');
            }
            const localVarPath = `/doctor/followup/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除某就诊记录
         * @param {number} id 就诊记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicalRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMedicalRecordId.');
            }
            const localVarPath = `/doctor/medical/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除管理员
         * @param {number} id 管理员ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrAdminId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMgrAdminId.');
            }
            const localVarPath = `/mgr/admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除医生
         * @param {number} id 医生ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrDoctorId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMgrDoctorId.');
            }
            const localVarPath = `/mgr/doctor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除知识库
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrKnowledgeId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMgrKnowledgeId.');
            }
            const localVarPath = `/mgr/knowledge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除患者
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrPatientId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMgrPatientId.');
            }
            const localVarPath = `/mgr/patient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员删除病例
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrPatientRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMgrPatientRecordId.');
            }
            const localVarPath = `/mgr/patientRecord/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者端批量删除消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatientMsg: async (msgIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'msgIds' is not null or undefined
            if (msgIds === null || msgIds === undefined) {
                throw new RequiredError('msgIds','Required parameter msgIds was null or undefined when calling deletePatientMsg.');
            }
            const localVarPath = `/patient/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (msgIds !== undefined) {
                localVarQueryParameter['msgIds'] = msgIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员消息列表
         * @param {number} [readFlag] 消息阅读状态。0 未读，1 已读
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminMsg: async (readFlag?: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/admin/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (readFlag !== undefined) {
                localVarQueryParameter['readFlag'] = readFlag;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员消息详情
         * @param {number} id 消息ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminMsgId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAdminMsgId.');
            }
            const localVarPath = `/mgr/admin/msg/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询智能诊疗详情
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorAiDiagnosis: async (patientRecordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getDoctorAiDiagnosis.');
            }
            const localVarPath = `/doctor/aiDiagnosis`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询智能诊疗的全部选项
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorAiDiagnosisOptions: async (patientRecordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getDoctorAiDiagnosisOptions.');
            }
            const localVarPath = `/doctor/aiDiagnosisOptions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询智能诊疗修改记录
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorAiDiagnosisRecord: async (patientRecordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getDoctorAiDiagnosisRecord.');
            }
            const localVarPath = `/doctor/aiDiagnosisRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查看某病例沟通记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorChat: async (patientRecordId: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getDoctorChat.');
            }
            const localVarPath = `/doctor/chat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查看随访记录设置项
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorFollowupRecordOptions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/followup/record/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 医生相关统计数据
         * @summary 统计数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorHomeData: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/home/data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询知识库列表
         * @param {string} [knowledgeType] 分类
         * @param {string} [keyword] 关键字
         * @param {number} [favorite] 是否收藏 1&#x3D;是 0&#x3D;否
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorKnowledge: async (knowledgeType?: string, keyword?: string, favorite?: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/knowledge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (knowledgeType !== undefined) {
                localVarQueryParameter['knowledgeType'] = knowledgeType;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (favorite !== undefined) {
                localVarQueryParameter['favorite'] = favorite;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询知识库详情
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorKnowledgeId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDoctorKnowledgeId.');
            }
            const localVarPath = `/doctor/knowledge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询当前登录的医生信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生消息列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [content] 关键字查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorMsg: async (page?: number, limit?: number, content?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 未读消息条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorMsgUnRead: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/msg/unRead`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询患者列表
         * @param {string} [keyword] 患者姓名或电话号码
         * @param {number} [all] 1&#x3D;从全量患者库搜索 0&#x3D;只搜索医生属下病人
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatient: async (keyword?: string, all?: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询患者列表(只筛选有病例的患者)
         * @param {string} [keyword] 患者姓名
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientHasRecord: async (keyword?: string, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patientHasRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询患者详情
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDoctorPatientId.');
            }
            const localVarPath = `/doctor/patient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询病例列表
         * @param {string} [truename] 真实姓名
         * @param {string} [treatDateBegin] 治疗时间（开始）
         * @param {string} [treatDateEnd] 治疗时间（结束）
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientRecord: async (truename?: string, treatDateBegin?: string, treatDateEnd?: string, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patientRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (truename !== undefined) {
                localVarQueryParameter['truename'] = truename;
            }

            if (treatDateBegin !== undefined) {
                localVarQueryParameter['treatDateBegin'] = (treatDateBegin as any instanceof Date) ?
                    (treatDateBegin as any).toISOString().substr(0,10) :
                    treatDateBegin;
            }

            if (treatDateEnd !== undefined) {
                localVarQueryParameter['treatDateEnd'] = (treatDateEnd as any instanceof Date) ?
                    (treatDateEnd as any).toISOString().substr(0,10) :
                    treatDateEnd;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询病例详情
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDoctorPatientRecordId.');
            }
            const localVarPath = `/doctor/patientRecord/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查询提醒列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorReminder: async (patientRecordId: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getDoctorReminder.');
            }
            const localVarPath = `/doctor/reminder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查看提醒详情
         * @param {number} id 提醒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorReminderId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDoctorReminderId.');
            }
            const localVarPath = `/doctor/reminder/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 阿里云OSS token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileOssToken: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/file/ossToken`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查看病例的随访记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowupRecord: async (patientRecordId: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getFollowupRecord.');
            }
            const localVarPath = `/doctor/followup/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 随访记录详情
         * @param {number} id 随访记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowupRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFollowupRecordId.');
            }
            const localVarPath = `/doctor/followup/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查看病例就诊记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedicalRecord: async (patientRecordId: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getMedicalRecord.');
            }
            const localVarPath = `/doctor/medical/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生查看就诊记录详情
         * @param {number} id 就诊记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedicalRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMedicalRecordId.');
            }
            const localVarPath = `/doctor/medical/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询管理员列表
         * @param {string} [truename] 姓名
         * @param {string} [account] 账号
         * @param {string} [createdAtBegin] 注册日期（开始）
         * @param {string} [createdAtEnd] 注册日期（结束）
         * @param {number} [status] 状态 1&#x3D;启用 0&#x3D;停用
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAdmin: async (truename?: string, account?: string, createdAtBegin?: string, createdAtEnd?: string, status?: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/admin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (truename !== undefined) {
                localVarQueryParameter['truename'] = truename;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (createdAtBegin !== undefined) {
                localVarQueryParameter['createdAtBegin'] = (createdAtBegin as any instanceof Date) ?
                    (createdAtBegin as any).toISOString().substr(0,10) :
                    createdAtBegin;
            }

            if (createdAtEnd !== undefined) {
                localVarQueryParameter['createdAtEnd'] = (createdAtEnd as any instanceof Date) ?
                    (createdAtEnd as any).toISOString().substr(0,10) :
                    createdAtEnd;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询管理员详情
         * @param {number} id 管理员ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAdminId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMgrAdminId.');
            }
            const localVarPath = `/mgr/admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 未读消息数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAdminMsgUnRead: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/admin/msg/unRead`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员查询智能诊疗详情
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAiDiagnosis: async (patientRecordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getMgrAiDiagnosis.');
            }
            const localVarPath = `/mgr/aiDiagnosis`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询智能诊疗的全部选项
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAiDiagnosisOptions: async (patientRecordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getMgrAiDiagnosisOptions.');
            }
            const localVarPath = `/mgr/aiDiagnosisOptions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员查询智能诊疗修改记录
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAiDiagnosisRecord: async (patientRecordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getMgrAiDiagnosisRecord.');
            }
            const localVarPath = `/mgr/aiDiagnosisRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询医生列表
         * @param {string} [truename] 姓名
         * @param {string} [hospitalName] 工作医院
         * @param {string} [titleName] 职称
         * @param {string} [fromPlace] 地区
         * @param {string} [createdAtBegin] 注册时间（开始）
         * @param {string} [createdAtEnd] 注册时间（结束）
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {number} [verifyState] 审核状态 0&#x3D;待审核 1&#x3D;通过
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrDoctor: async (truename?: string, hospitalName?: string, titleName?: string, fromPlace?: string, createdAtBegin?: string, createdAtEnd?: string, page?: number, limit?: number, verifyState?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/doctor`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (truename !== undefined) {
                localVarQueryParameter['truename'] = truename;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['hospitalName'] = hospitalName;
            }

            if (titleName !== undefined) {
                localVarQueryParameter['titleName'] = titleName;
            }

            if (fromPlace !== undefined) {
                localVarQueryParameter['fromPlace'] = fromPlace;
            }

            if (createdAtBegin !== undefined) {
                localVarQueryParameter['createdAtBegin'] = createdAtBegin;
            }

            if (createdAtEnd !== undefined) {
                localVarQueryParameter['createdAtEnd'] = createdAtEnd;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (verifyState !== undefined) {
                localVarQueryParameter['verifyState'] = verifyState;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询医生详情
         * @param {number} id 医生ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrDoctorId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMgrDoctorId.');
            }
            const localVarPath = `/mgr/doctor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员查看病例的随访记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrFollowupRecord: async (patientRecordId: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getMgrFollowupRecord.');
            }
            const localVarPath = `/mgr/followup/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理端查看随访记录设置项
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrFollowupRecordOptions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/followup/record/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询知识库列表
         * @param {string} [knowledgeType] 分类
         * @param {string} [keyword] 关键字
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrKnowledge: async (knowledgeType?: string, keyword?: string, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/knowledge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (knowledgeType !== undefined) {
                localVarQueryParameter['knowledgeType'] = knowledgeType;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员查询知识库详情
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrKnowledgeId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMgrKnowledgeId.');
            }
            const localVarPath = `/mgr/knowledge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询当前登录管理员信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员查看病例的就诊记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrMedicalRecord: async (patientRecordId: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getMgrMedicalRecord.');
            }
            const localVarPath = `/mgr/medical/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询患者列表
         * @param {string} [truename] 姓名
         * @param {string} [fromPlace] 地区
         * @param {string} [ageType] 儿童、少年、青年、中年、老年
         * @param {string} [doctorName] 所属医生姓名
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatient: async (truename?: string, fromPlace?: string, ageType?: string, doctorName?: string, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/patient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (truename !== undefined) {
                localVarQueryParameter['truename'] = truename;
            }

            if (fromPlace !== undefined) {
                localVarQueryParameter['fromPlace'] = fromPlace;
            }

            if (ageType !== undefined) {
                localVarQueryParameter['ageType'] = ageType;
            }

            if (doctorName !== undefined) {
                localVarQueryParameter['doctorName'] = doctorName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询患者详情
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatientId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMgrPatientId.');
            }
            const localVarPath = `/mgr/patient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理端查询病例列表
         * @param {string} [patientRecordNumber] 病例号
         * @param {string} [diseaseType] 病类
         * @param {string} [patientId] 患者ID
         * @param {string} [treatDateBegin] 治疗时间（开始）
         * @param {string} [treatDateEnd] 治疗时间（结束）
         * @param {number} [operation] 是否手术 1&#x3D;是 0&#x3D;否
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [score] 分型得分。例如:tlaosis &gt;&#x3D; 50或tlics BETWEEN 10 AND 20（注意空格不能省略）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatientRecord: async (patientRecordNumber?: string, diseaseType?: string, patientId?: string, treatDateBegin?: string, treatDateEnd?: string, operation?: number, page?: number, limit?: number, score?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/patientRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordNumber !== undefined) {
                localVarQueryParameter['patientRecordNumber'] = patientRecordNumber;
            }

            if (diseaseType !== undefined) {
                localVarQueryParameter['diseaseType'] = diseaseType;
            }

            if (patientId !== undefined) {
                localVarQueryParameter['patientId'] = patientId;
            }

            if (treatDateBegin !== undefined) {
                localVarQueryParameter['treatDateBegin'] = treatDateBegin;
            }

            if (treatDateEnd !== undefined) {
                localVarQueryParameter['treatDateEnd'] = treatDateEnd;
            }

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (score !== undefined) {
                localVarQueryParameter['score'] = score;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员查询病例详情
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatientRecordId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMgrPatientRecordId.');
            }
            const localVarPath = `/mgr/patientRecord/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者查看沟通记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientChat: async (patientRecordId: number, page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientRecordId' is not null or undefined
            if (patientRecordId === null || patientRecordId === undefined) {
                throw new RequiredError('patientRecordId','Required parameter patientRecordId was null or undefined when calling getPatientChat.');
            }
            const localVarPath = `/patient/chat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientRecordId !== undefined) {
                localVarQueryParameter['patientRecordId'] = patientRecordId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询当前登录患者信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者消息列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [content] 关键字查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientMsg: async (page?: number, limit?: number, content?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 未读消息数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientMsgUnRead: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/msg/unRead`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者端首页查询病例列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientPatientRecord: async (page?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/patientRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询全部病类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesDiseasetype: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/types/diseasetype`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询全部医生职称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesDoctortitle: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/types/doctortitle`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询全部知识库分类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesKnowledgetype: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/types/knowledgetype`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询全部提醒类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesRemindtype: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/types/remindtype`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生新增一条沟通记录
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChat: async (inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/chat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据随访记录中评分数据项，获得评分
         * @summary 获得评分
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorFollowupRecordScore: async (inlineObject5?: InlineObject5, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/followup/record/score`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject5 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {}) : (inlineObject5 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorLogout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生创建患者
         * @param {InlineObject11} [inlineObject11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatient: async (inlineObject11?: InlineObject11, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject11 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject11 !== undefined ? inlineObject11 : {}) : (inlineObject11 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 医生推送文章消息给患者
         * @summary 医生推送消息
         * @param {InlineObject12} [inlineObject12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatientChat: async (inlineObject12?: InlineObject12, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patient/chat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject12 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject12 !== undefined ? inlineObject12 : {}) : (inlineObject12 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 医生推送文章消息给患者
         * @summary 推送消息
         * @param {InlineObject13} [inlineObject13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatientMsg: async (inlineObject13?: InlineObject13, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patient/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject13 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject13 !== undefined ? inlineObject13 : {}) : (inlineObject13 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增病例
         * @param {InlineObject15} [inlineObject15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatientRecord: async (inlineObject15?: InlineObject15, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patientRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject15 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject15 !== undefined ? inlineObject15 : {}) : (inlineObject15 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生创建新提醒
         * @param {InlineObject18} [inlineObject18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorReminder: async (inlineObject18?: InlineObject18, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/reminder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject18 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject18 !== undefined ? inlineObject18 : {}) : (inlineObject18 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增随访记录
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollowupRecord: async (inlineObject4?: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/followup/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject4 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {}) : (inlineObject4 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员登录
         * @param {InlineObject19} [inlineObject19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (inlineObject19?: InlineObject19, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject19 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject19 !== undefined ? inlineObject19 : {}) : (inlineObject19 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生新增就诊记录
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMedicalRecord: async (inlineObject9?: InlineObject9, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/medical/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject9 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject9 !== undefined ? inlineObject9 : {}) : (inlineObject9 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建管理员
         * @param {InlineObject21} [inlineObject21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrAdmin: async (inlineObject21?: InlineObject21, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/admin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject21 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject21 !== undefined ? inlineObject21 : {}) : (inlineObject21 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员创建医生
         * @param {InlineObject23} [inlineObject23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrDoctor: async (inlineObject23?: InlineObject23, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/doctor`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject23 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject23 !== undefined ? inlineObject23 : {}) : (inlineObject23 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 审核医生注册
         * @param {InlineObject24} [inlineObject24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrDoctorVerify: async (inlineObject24?: InlineObject24, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/doctor/verify`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject24 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject24 !== undefined ? inlineObject24 : {}) : (inlineObject24 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新发布知识库
         * @param {InlineObject26} [inlineObject26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrKnowledge: async (inlineObject26?: InlineObject26, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/knowledge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject26 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject26 !== undefined ? inlineObject26 : {}) : (inlineObject26 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量删除
         * @param {InlineObject27} [inlineObject27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrKnowledgeDelete: async (inlineObject27?: InlineObject27, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/knowledge/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject27 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject27 !== undefined ? inlineObject27 : {}) : (inlineObject27 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 忘记密码(含发短信)
         * @param {InlineObject36} [inlineObject36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrPasswordForget: async (inlineObject36?: InlineObject36, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/password/forget`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject36 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject36 !== undefined ? inlineObject36 : {}) : (inlineObject36 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 重置密码为手机号的后6位
         * @summary 重置管理员密码
         * @param {InlineObject30} [inlineObject30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrPasswordReset: async (inlineObject30?: InlineObject30, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/password/reset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject30 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject30 !== undefined ? inlineObject30 : {}) : (inlineObject30 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者新增一条沟通记录
         * @param {InlineObject31} [inlineObject31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPatientChat: async (inlineObject31?: InlineObject31, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/chat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject31 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject31 !== undefined ? inlineObject31 : {}) : (inlineObject31 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPatientLogout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生小程序登录
         * @param {InlineObject34} [inlineObject34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicLoginDoctor: async (inlineObject34?: InlineObject34, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/login/doctor`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject34 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject34 !== undefined ? inlineObject34 : {}) : (inlineObject34 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者小程序登录
         * @param {InlineObject35} [inlineObject35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicLoginPatient: async (inlineObject35?: InlineObject35, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/login/patient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject35 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject35 !== undefined ? inlineObject35 : {}) : (inlineObject35 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 注册医生
         * @param {InlineObject37} [inlineObject37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicRegisterDoctor: async (inlineObject37?: InlineObject37, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/register/doctor`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject37 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject37 !== undefined ? inlineObject37 : {}) : (inlineObject37 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 发送短信验证码
         * @param {InlineObject38} [inlineObject38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicSmsCaptcha: async (inlineObject38?: InlineObject38, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/smsCaptcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject38 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject38 !== undefined ? inlineObject38 : {}) : (inlineObject38 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 标记管理员消息为已读
         * @param {number} id 消息ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAdminMsgId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putAdminMsgId.');
            }
            const localVarPath = `/mgr/admin/msg/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生编辑智能诊疗
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorAiDiagnosis: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/aiDiagnosis`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生端动态计算智能诊疗分数
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorAiDiagnosisScore: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/aiDiagnosis/score`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 只能撤回当天的沟通记录
         * @summary 医生撤回某沟通记录
         * @param {number} id 沟通记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorChatId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putDoctorChatId.');
            }
            const localVarPath = `/doctor/chat/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 收藏或取消收藏知识库
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorKnowledgeFavorite: async (inlineObject6?: InlineObject6, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/knowledge/favorite`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject6 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {}) : (inlineObject6 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生编辑本人信息
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorMe: async (inlineObject7?: InlineObject7, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject7 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {}) : (inlineObject7 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 标记当前所有未读消息为已读
         * @summary 医生阅读消息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorMsg: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生编辑属下患者信息
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorPatient: async (inlineObject10?: InlineObject10, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject10 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject10 !== undefined ? inlineObject10 : {}) : (inlineObject10 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑病例
         * @param {InlineObject14} [inlineObject14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorPatientRecord: async (inlineObject14?: InlineObject14, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/patientRecord`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject14 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject14 !== undefined ? inlineObject14 : {}) : (inlineObject14 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生修改本人手机号码
         * @param {InlineObject16} [inlineObject16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorPhone: async (inlineObject16?: InlineObject16, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/phone`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject16 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject16 !== undefined ? inlineObject16 : {}) : (inlineObject16 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生修改提醒
         * @param {InlineObject17} [inlineObject17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorReminder: async (inlineObject17?: InlineObject17, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/reminder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject17 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject17 !== undefined ? inlineObject17 : {}) : (inlineObject17 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改随访记录
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFollowupRecord: async (inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/followup/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject3 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 医生修改就诊记录
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMedicalRecord: async (inlineObject8?: InlineObject8, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/doctor/medical/record`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject8 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject8 !== undefined ? inlineObject8 : {}) : (inlineObject8 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑管理员
         * @param {InlineObject20} [inlineObject20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrAdmin: async (inlineObject20?: InlineObject20, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/admin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject20 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject20 !== undefined ? inlineObject20 : {}) : (inlineObject20 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理员编辑医生
         * @param {InlineObject22} [inlineObject22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrDoctor: async (inlineObject22?: InlineObject22, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/doctor`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject22 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject22 !== undefined ? inlineObject22 : {}) : (inlineObject22 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑知识库
         * @param {InlineObject25} [inlineObject25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrKnowledge: async (inlineObject25?: InlineObject25, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/knowledge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject25 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject25 !== undefined ? inlineObject25 : {}) : (inlineObject25 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 当前管理员编辑个人资料
         * @param {InlineObject28} [inlineObject28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrMe: async (inlineObject28?: InlineObject28, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject28 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject28 !== undefined ? inlineObject28 : {}) : (inlineObject28 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {InlineObject29} [inlineObject29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrPassword: async (inlineObject29?: InlineObject29, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mgr/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject29 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject29 !== undefined ? inlineObject29 : {}) : (inlineObject29 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 只能撤回当天的沟通记录
         * @summary 患者撤回某沟通记录
         * @param {number} id 沟通记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientChatId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putPatientChatId.');
            }
            const localVarPath = `/patient/chat/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 小程序端可用加密方式修改昵称、头像等
         * @summary 修改当前患者信息
         * @param {InlineObject32} [inlineObject32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientMe: async (inlineObject32?: InlineObject32, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject32 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject32 !== undefined ? inlineObject32 : {}) : (inlineObject32 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 标记当前所有未读消息为已读
         * @summary 患者阅读消息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientMsg: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/msg`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 患者修改本人手机号码
         * @param {InlineObject33} [inlineObject33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientPhone: async (inlineObject33?: InlineObject33, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient/phone`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject33 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject33 !== undefined ? inlineObject33 : {}) : (inlineObject33 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量删除管理员消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdminMsg(msgIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteAdminMsg(msgIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量删除消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDoctorMsg(msgIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteDoctorMsg(msgIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生删除患者
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDoctorPatientId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteDoctorPatientId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生删除病例
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDoctorPatientRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteDoctorPatientRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生删除提醒
         * @param {number} id 提醒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDoctorReminderId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteDoctorReminderId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除随访记录
         * @param {number} id 随访记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFollowupRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteFollowupRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除某就诊记录
         * @param {number} id 就诊记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedicalRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMedicalRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除管理员
         * @param {number} id 管理员ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMgrAdminId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMgrAdminId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除医生
         * @param {number} id 医生ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMgrDoctorId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMgrDoctorId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除知识库
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMgrKnowledgeId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMgrKnowledgeId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除患者
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMgrPatientId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMgrPatientId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员删除病例
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMgrPatientRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMgrPatientRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者端批量删除消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePatientMsg(msgIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deletePatientMsg(msgIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员消息列表
         * @param {number} [readFlag] 消息阅读状态。0 未读，1 已读
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminMsg(readFlag?: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20019>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getAdminMsg(readFlag, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员消息详情
         * @param {number} id 消息ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminMsgId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20020>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getAdminMsgId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询智能诊疗详情
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorAiDiagnosis(patientRecordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiDiagnosis>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorAiDiagnosis(patientRecordId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询智能诊疗的全部选项
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorAiDiagnosisOptions(patientRecordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorAiDiagnosisOptions(patientRecordId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询智能诊疗修改记录
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorAiDiagnosisRecord(patientRecordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AiDiagnosisRecord>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorAiDiagnosisRecord(patientRecordId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查看某病例沟通记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorChat(patientRecordId: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorChat(patientRecordId, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查看随访记录设置项
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorFollowupRecordOptions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FollowupRecordOptions>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorFollowupRecordOptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 医生相关统计数据
         * @summary 统计数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorHomeData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorHomeData(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询知识库列表
         * @param {string} [knowledgeType] 分类
         * @param {string} [keyword] 关键字
         * @param {number} [favorite] 是否收藏 1&#x3D;是 0&#x3D;否
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorKnowledge(knowledgeType?: string, keyword?: string, favorite?: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorKnowledge(knowledgeType, keyword, favorite, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询知识库详情
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorKnowledgeId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorKnowledgeId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询当前登录的医生信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生消息列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [content] 关键字查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorMsg(page?: number, limit?: number, content?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorMsg(page, limit, content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 未读消息条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorMsgUnRead(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorMsgUnRead(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询患者列表
         * @param {string} [keyword] 患者姓名或电话号码
         * @param {number} [all] 1&#x3D;从全量患者库搜索 0&#x3D;只搜索医生属下病人
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorPatient(keyword?: string, all?: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorPatient(keyword, all, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询患者列表(只筛选有病例的患者)
         * @param {string} [keyword] 患者姓名
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorPatientHasRecord(keyword?: string, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorPatientHasRecord(keyword, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询患者详情
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorPatientId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorPatientId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询病例列表
         * @param {string} [truename] 真实姓名
         * @param {string} [treatDateBegin] 治疗时间（开始）
         * @param {string} [treatDateEnd] 治疗时间（结束）
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorPatientRecord(truename?: string, treatDateBegin?: string, treatDateEnd?: string, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorPatientRecord(truename, treatDateBegin, treatDateEnd, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询病例详情
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorPatientRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientRecord>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorPatientRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查询提醒列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorReminder(patientRecordId: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorReminder(patientRecordId, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查看提醒详情
         * @param {number} id 提醒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoctorReminderId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorReminderDetailVo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDoctorReminderId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 阿里云OSS token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileOssToken(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20016>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getFileOssToken(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查看病例的随访记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowupRecord(patientRecordId: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getFollowupRecord(patientRecordId, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 随访记录详情
         * @param {number} id 随访记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowupRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getFollowupRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查看病例就诊记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedicalRecord(patientRecordId: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMedicalRecord(patientRecordId, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生查看就诊记录详情
         * @param {number} id 就诊记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedicalRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMedicalRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询管理员列表
         * @param {string} [truename] 姓名
         * @param {string} [account] 账号
         * @param {string} [createdAtBegin] 注册日期（开始）
         * @param {string} [createdAtEnd] 注册日期（结束）
         * @param {number} [status] 状态 1&#x3D;启用 0&#x3D;停用
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrAdmin(truename?: string, account?: string, createdAtBegin?: string, createdAtEnd?: string, status?: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrAdmin(truename, account, createdAtBegin, createdAtEnd, status, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询管理员详情
         * @param {number} id 管理员ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrAdminId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrAdminId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 未读消息数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrAdminMsgUnRead(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrAdminMsgUnRead(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员查询智能诊疗详情
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrAiDiagnosis(patientRecordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiDiagnosis>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrAiDiagnosis(patientRecordId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询智能诊疗的全部选项
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrAiDiagnosisOptions(patientRecordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrAiDiagnosisOptions(patientRecordId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员查询智能诊疗修改记录
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrAiDiagnosisRecord(patientRecordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AiDiagnosisRecord>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrAiDiagnosisRecord(patientRecordId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询医生列表
         * @param {string} [truename] 姓名
         * @param {string} [hospitalName] 工作医院
         * @param {string} [titleName] 职称
         * @param {string} [fromPlace] 地区
         * @param {string} [createdAtBegin] 注册时间（开始）
         * @param {string} [createdAtEnd] 注册时间（结束）
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {number} [verifyState] 审核状态 0&#x3D;待审核 1&#x3D;通过
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrDoctor(truename?: string, hospitalName?: string, titleName?: string, fromPlace?: string, createdAtBegin?: string, createdAtEnd?: string, page?: number, limit?: number, verifyState?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20021>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrDoctor(truename, hospitalName, titleName, fromPlace, createdAtBegin, createdAtEnd, page, limit, verifyState, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询医生详情
         * @param {number} id 医生ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrDoctorId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrDoctorId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员查看病例的随访记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrFollowupRecord(patientRecordId: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrFollowupRecord(patientRecordId, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理端查看随访记录设置项
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrFollowupRecordOptions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FollowupRecordOptions>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrFollowupRecordOptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询知识库列表
         * @param {string} [knowledgeType] 分类
         * @param {string} [keyword] 关键字
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrKnowledge(knowledgeType?: string, keyword?: string, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrKnowledge(knowledgeType, keyword, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员查询知识库详情
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrKnowledgeId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Knowledge>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrKnowledgeId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询当前登录管理员信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员查看病例的就诊记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrMedicalRecord(patientRecordId: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrMedicalRecord(patientRecordId, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询患者列表
         * @param {string} [truename] 姓名
         * @param {string} [fromPlace] 地区
         * @param {string} [ageType] 儿童、少年、青年、中年、老年
         * @param {string} [doctorName] 所属医生姓名
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrPatient(truename?: string, fromPlace?: string, ageType?: string, doctorName?: string, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrPatient(truename, fromPlace, ageType, doctorName, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询患者详情
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrPatientId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrPatientId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理端查询病例列表
         * @param {string} [patientRecordNumber] 病例号
         * @param {string} [diseaseType] 病类
         * @param {string} [patientId] 患者ID
         * @param {string} [treatDateBegin] 治疗时间（开始）
         * @param {string} [treatDateEnd] 治疗时间（结束）
         * @param {number} [operation] 是否手术 1&#x3D;是 0&#x3D;否
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [score] 分型得分。例如:tlaosis &gt;&#x3D; 50或tlics BETWEEN 10 AND 20（注意空格不能省略）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrPatientRecord(patientRecordNumber?: string, diseaseType?: string, patientId?: string, treatDateBegin?: string, treatDateEnd?: string, operation?: number, page?: number, limit?: number, score?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20022>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrPatientRecord(patientRecordNumber, diseaseType, patientId, treatDateBegin, treatDateEnd, operation, page, limit, score, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员查询病例详情
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMgrPatientRecordId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientRecord>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMgrPatientRecordId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者查看沟通记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientChat(patientRecordId: number, page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPatientChat(patientRecordId, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询当前登录患者信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPatientMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者消息列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [content] 关键字查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientMsg(page?: number, limit?: number, content?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20023>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPatientMsg(page, limit, content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 未读消息数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientMsgUnRead(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPatientMsgUnRead(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者端首页查询病例列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientPatientRecord(page?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20024>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPatientPatientRecord(page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询全部病类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicTypesDiseasetype(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypesItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPublicTypesDiseasetype(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询全部医生职称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicTypesDoctortitle(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypesItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPublicTypesDoctortitle(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询全部知识库分类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicTypesKnowledgetype(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypesItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPublicTypesKnowledgetype(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询全部提醒类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicTypesRemindtype(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypesItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPublicTypesRemindtype(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生新增一条沟通记录
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postChat(inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postChat(inlineObject2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 根据随访记录中评分数据项，获得评分
         * @summary 获得评分
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoctorFollowupRecordScore(inlineObject5?: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDoctorFollowupRecordScore(inlineObject5, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoctorLogout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDoctorLogout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生创建患者
         * @param {InlineObject11} [inlineObject11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoctorPatient(inlineObject11?: InlineObject11, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDoctorPatient(inlineObject11, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 医生推送文章消息给患者
         * @summary 医生推送消息
         * @param {InlineObject12} [inlineObject12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoctorPatientChat(inlineObject12?: InlineObject12, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDoctorPatientChat(inlineObject12, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 医生推送文章消息给患者
         * @summary 推送消息
         * @param {InlineObject13} [inlineObject13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoctorPatientMsg(inlineObject13?: InlineObject13, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDoctorPatientMsg(inlineObject13, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新增病例
         * @param {InlineObject15} [inlineObject15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoctorPatientRecord(inlineObject15?: InlineObject15, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDoctorPatientRecord(inlineObject15, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生创建新提醒
         * @param {InlineObject18} [inlineObject18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoctorReminder(inlineObject18?: InlineObject18, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDoctorReminder(inlineObject18, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新增随访记录
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFollowupRecord(inlineObject4?: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postFollowupRecord(inlineObject4, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员登录
         * @param {InlineObject19} [inlineObject19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(inlineObject19?: InlineObject19, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20017>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postLogin(inlineObject19, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生新增就诊记录
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMedicalRecord(inlineObject9?: InlineObject9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMedicalRecord(inlineObject9, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建管理员
         * @param {InlineObject21} [inlineObject21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMgrAdmin(inlineObject21?: InlineObject21, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMgrAdmin(inlineObject21, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员创建医生
         * @param {InlineObject23} [inlineObject23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMgrDoctor(inlineObject23?: InlineObject23, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMgrDoctor(inlineObject23, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 审核医生注册
         * @param {InlineObject24} [inlineObject24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMgrDoctorVerify(inlineObject24?: InlineObject24, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMgrDoctorVerify(inlineObject24, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新发布知识库
         * @param {InlineObject26} [inlineObject26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMgrKnowledge(inlineObject26?: InlineObject26, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMgrKnowledge(inlineObject26, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量删除
         * @param {InlineObject27} [inlineObject27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMgrKnowledgeDelete(inlineObject27?: InlineObject27, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMgrKnowledgeDelete(inlineObject27, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 忘记密码(含发短信)
         * @param {InlineObject36} [inlineObject36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMgrPasswordForget(inlineObject36?: InlineObject36, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMgrPasswordForget(inlineObject36, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 重置密码为手机号的后6位
         * @summary 重置管理员密码
         * @param {InlineObject30} [inlineObject30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMgrPasswordReset(inlineObject30?: InlineObject30, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMgrPasswordReset(inlineObject30, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者新增一条沟通记录
         * @param {InlineObject31} [inlineObject31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPatientChat(inlineObject31?: InlineObject31, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postPatientChat(inlineObject31, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPatientLogout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postPatientLogout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生小程序登录
         * @param {InlineObject34} [inlineObject34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPublicLoginDoctor(inlineObject34?: InlineObject34, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20025>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postPublicLoginDoctor(inlineObject34, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者小程序登录
         * @param {InlineObject35} [inlineObject35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPublicLoginPatient(inlineObject35?: InlineObject35, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20025>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postPublicLoginPatient(inlineObject35, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 注册医生
         * @param {InlineObject37} [inlineObject37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPublicRegisterDoctor(inlineObject37?: InlineObject37, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postPublicRegisterDoctor(inlineObject37, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 发送短信验证码
         * @param {InlineObject38} [inlineObject38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPublicSmsCaptcha(inlineObject38?: InlineObject38, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postPublicSmsCaptcha(inlineObject38, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 标记管理员消息为已读
         * @param {number} id 消息ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAdminMsgId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putAdminMsgId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生编辑智能诊疗
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorAiDiagnosis(inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorAiDiagnosis(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生端动态计算智能诊疗分数
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorAiDiagnosisScore(inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiDiagnosis>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorAiDiagnosisScore(inlineObject1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 只能撤回当天的沟通记录
         * @summary 医生撤回某沟通记录
         * @param {number} id 沟通记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorChatId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorChatId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 收藏或取消收藏知识库
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorKnowledgeFavorite(inlineObject6?: InlineObject6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorKnowledgeFavorite(inlineObject6, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生编辑本人信息
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorMe(inlineObject7?: InlineObject7, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorMe(inlineObject7, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 标记当前所有未读消息为已读
         * @summary 医生阅读消息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorMsg(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorMsg(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生编辑属下患者信息
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorPatient(inlineObject10?: InlineObject10, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorPatient(inlineObject10, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑病例
         * @param {InlineObject14} [inlineObject14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorPatientRecord(inlineObject14?: InlineObject14, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorPatientRecord(inlineObject14, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生修改本人手机号码
         * @param {InlineObject16} [inlineObject16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorPhone(inlineObject16?: InlineObject16, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorPhone(inlineObject16, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生修改提醒
         * @param {InlineObject17} [inlineObject17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDoctorReminder(inlineObject17?: InlineObject17, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDoctorReminder(inlineObject17, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改随访记录
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFollowupRecord(inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putFollowupRecord(inlineObject3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 医生修改就诊记录
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMedicalRecord(inlineObject8?: InlineObject8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMedicalRecord(inlineObject8, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑管理员
         * @param {InlineObject20} [inlineObject20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMgrAdmin(inlineObject20?: InlineObject20, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMgrAdmin(inlineObject20, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 管理员编辑医生
         * @param {InlineObject22} [inlineObject22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMgrDoctor(inlineObject22?: InlineObject22, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMgrDoctor(inlineObject22, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑知识库
         * @param {InlineObject25} [inlineObject25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMgrKnowledge(inlineObject25?: InlineObject25, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMgrKnowledge(inlineObject25, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 当前管理员编辑个人资料
         * @param {InlineObject28} [inlineObject28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMgrMe(inlineObject28?: InlineObject28, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMgrMe(inlineObject28, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {InlineObject29} [inlineObject29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMgrPassword(inlineObject29?: InlineObject29, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMgrPassword(inlineObject29, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 只能撤回当天的沟通记录
         * @summary 患者撤回某沟通记录
         * @param {number} id 沟通记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPatientChatId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putPatientChatId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 小程序端可用加密方式修改昵称、头像等
         * @summary 修改当前患者信息
         * @param {InlineObject32} [inlineObject32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPatientMe(inlineObject32?: InlineObject32, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putPatientMe(inlineObject32, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 标记当前所有未读消息为已读
         * @summary 患者阅读消息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPatientMsg(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putPatientMsg(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 患者修改本人手机号码
         * @param {InlineObject33} [inlineObject33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPatientPhone(inlineObject33?: InlineObject33, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putPatientPhone(inlineObject33, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 批量删除管理员消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminMsg(msgIds: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteAdminMsg(msgIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量删除消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorMsg(msgIds: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteDoctorMsg(msgIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生删除患者
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorPatientId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteDoctorPatientId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生删除病例
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorPatientRecordId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteDoctorPatientRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生删除提醒
         * @param {number} id 提醒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoctorReminderId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteDoctorReminderId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除随访记录
         * @param {number} id 随访记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollowupRecordId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteFollowupRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除某就诊记录
         * @param {number} id 就诊记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedicalRecordId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteMedicalRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除管理员
         * @param {number} id 管理员ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrAdminId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteMgrAdminId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除医生
         * @param {number} id 医生ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrDoctorId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteMgrDoctorId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除知识库
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrKnowledgeId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteMgrKnowledgeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除患者
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrPatientId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteMgrPatientId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员删除病例
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMgrPatientRecordId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deleteMgrPatientRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者端批量删除消息
         * @param {string} msgIds 消息ID组装字符串，‘,’分隔
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatientMsg(msgIds: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).deletePatientMsg(msgIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员消息列表
         * @param {number} [readFlag] 消息阅读状态。0 未读，1 已读
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminMsg(readFlag?: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20019> {
            return DefaultApiFp(configuration).getAdminMsg(readFlag, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员消息详情
         * @param {number} id 消息ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminMsgId(id: number, options?: any): AxiosPromise<InlineResponse20020> {
            return DefaultApiFp(configuration).getAdminMsgId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询智能诊疗详情
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorAiDiagnosis(patientRecordId: number, options?: any): AxiosPromise<AiDiagnosis> {
            return DefaultApiFp(configuration).getDoctorAiDiagnosis(patientRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询智能诊疗的全部选项
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorAiDiagnosisOptions(patientRecordId: number, options?: any): AxiosPromise<InlineResponse200> {
            return DefaultApiFp(configuration).getDoctorAiDiagnosisOptions(patientRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询智能诊疗修改记录
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorAiDiagnosisRecord(patientRecordId: number, options?: any): AxiosPromise<Array<AiDiagnosisRecord>> {
            return DefaultApiFp(configuration).getDoctorAiDiagnosisRecord(patientRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查看某病例沟通记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorChat(patientRecordId: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2001> {
            return DefaultApiFp(configuration).getDoctorChat(patientRecordId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查看随访记录设置项
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorFollowupRecordOptions(options?: any): AxiosPromise<Array<FollowupRecordOptions>> {
            return DefaultApiFp(configuration).getDoctorFollowupRecordOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 医生相关统计数据
         * @summary 统计数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorHomeData(options?: any): AxiosPromise<InlineResponse2005> {
            return DefaultApiFp(configuration).getDoctorHomeData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询知识库列表
         * @param {string} [knowledgeType] 分类
         * @param {string} [keyword] 关键字
         * @param {number} [favorite] 是否收藏 1&#x3D;是 0&#x3D;否
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorKnowledge(knowledgeType?: string, keyword?: string, favorite?: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2006> {
            return DefaultApiFp(configuration).getDoctorKnowledge(knowledgeType, keyword, favorite, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询知识库详情
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorKnowledgeId(id: number, options?: any): AxiosPromise<InlineResponse2007> {
            return DefaultApiFp(configuration).getDoctorKnowledgeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询当前登录的医生信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorMe(options?: any): AxiosPromise<Doctor> {
            return DefaultApiFp(configuration).getDoctorMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生消息列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [content] 关键字查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorMsg(page?: number, limit?: number, content?: string, options?: any): AxiosPromise<InlineResponse20010> {
            return DefaultApiFp(configuration).getDoctorMsg(page, limit, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 未读消息条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorMsgUnRead(options?: any): AxiosPromise<InlineResponse20011> {
            return DefaultApiFp(configuration).getDoctorMsgUnRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询患者列表
         * @param {string} [keyword] 患者姓名或电话号码
         * @param {number} [all] 1&#x3D;从全量患者库搜索 0&#x3D;只搜索医生属下病人
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatient(keyword?: string, all?: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012> {
            return DefaultApiFp(configuration).getDoctorPatient(keyword, all, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询患者列表(只筛选有病例的患者)
         * @param {string} [keyword] 患者姓名
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientHasRecord(keyword?: string, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012> {
            return DefaultApiFp(configuration).getDoctorPatientHasRecord(keyword, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询患者详情
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientId(id: number, options?: any): AxiosPromise<Patient> {
            return DefaultApiFp(configuration).getDoctorPatientId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询病例列表
         * @param {string} [truename] 真实姓名
         * @param {string} [treatDateBegin] 治疗时间（开始）
         * @param {string} [treatDateEnd] 治疗时间（结束）
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientRecord(truename?: string, treatDateBegin?: string, treatDateEnd?: string, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20014> {
            return DefaultApiFp(configuration).getDoctorPatientRecord(truename, treatDateBegin, treatDateEnd, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询病例详情
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorPatientRecordId(id: number, options?: any): AxiosPromise<PatientRecord> {
            return DefaultApiFp(configuration).getDoctorPatientRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查询提醒列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorReminder(patientRecordId: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20015> {
            return DefaultApiFp(configuration).getDoctorReminder(patientRecordId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查看提醒详情
         * @param {number} id 提醒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoctorReminderId(id: number, options?: any): AxiosPromise<DoctorReminderDetailVo> {
            return DefaultApiFp(configuration).getDoctorReminderId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 阿里云OSS token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileOssToken(options?: any): AxiosPromise<InlineResponse20016> {
            return DefaultApiFp(configuration).getFileOssToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查看病例的随访记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowupRecord(patientRecordId: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return DefaultApiFp(configuration).getFollowupRecord(patientRecordId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 随访记录详情
         * @param {number} id 随访记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowupRecordId(id: number, options?: any): AxiosPromise<InlineResponse2004> {
            return DefaultApiFp(configuration).getFollowupRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查看病例就诊记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedicalRecord(patientRecordId: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2008> {
            return DefaultApiFp(configuration).getMedicalRecord(patientRecordId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生查看就诊记录详情
         * @param {number} id 就诊记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedicalRecordId(id: number, options?: any): AxiosPromise<InlineResponse2009> {
            return DefaultApiFp(configuration).getMedicalRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询管理员列表
         * @param {string} [truename] 姓名
         * @param {string} [account] 账号
         * @param {string} [createdAtBegin] 注册日期（开始）
         * @param {string} [createdAtEnd] 注册日期（结束）
         * @param {number} [status] 状态 1&#x3D;启用 0&#x3D;停用
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAdmin(truename?: string, account?: string, createdAtBegin?: string, createdAtEnd?: string, status?: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20018> {
            return DefaultApiFp(configuration).getMgrAdmin(truename, account, createdAtBegin, createdAtEnd, status, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询管理员详情
         * @param {number} id 管理员ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAdminId(id: number, options?: any): AxiosPromise<Admin> {
            return DefaultApiFp(configuration).getMgrAdminId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 未读消息数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAdminMsgUnRead(options?: any): AxiosPromise<InlineResponse20011> {
            return DefaultApiFp(configuration).getMgrAdminMsgUnRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员查询智能诊疗详情
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAiDiagnosis(patientRecordId: number, options?: any): AxiosPromise<AiDiagnosis> {
            return DefaultApiFp(configuration).getMgrAiDiagnosis(patientRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询智能诊疗的全部选项
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAiDiagnosisOptions(patientRecordId: number, options?: any): AxiosPromise<InlineResponse200> {
            return DefaultApiFp(configuration).getMgrAiDiagnosisOptions(patientRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员查询智能诊疗修改记录
         * @param {number} patientRecordId 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrAiDiagnosisRecord(patientRecordId: number, options?: any): AxiosPromise<Array<AiDiagnosisRecord>> {
            return DefaultApiFp(configuration).getMgrAiDiagnosisRecord(patientRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询医生列表
         * @param {string} [truename] 姓名
         * @param {string} [hospitalName] 工作医院
         * @param {string} [titleName] 职称
         * @param {string} [fromPlace] 地区
         * @param {string} [createdAtBegin] 注册时间（开始）
         * @param {string} [createdAtEnd] 注册时间（结束）
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {number} [verifyState] 审核状态 0&#x3D;待审核 1&#x3D;通过
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrDoctor(truename?: string, hospitalName?: string, titleName?: string, fromPlace?: string, createdAtBegin?: string, createdAtEnd?: string, page?: number, limit?: number, verifyState?: number, options?: any): AxiosPromise<InlineResponse20021> {
            return DefaultApiFp(configuration).getMgrDoctor(truename, hospitalName, titleName, fromPlace, createdAtBegin, createdAtEnd, page, limit, verifyState, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询医生详情
         * @param {number} id 医生ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrDoctorId(id: number, options?: any): AxiosPromise<Doctor> {
            return DefaultApiFp(configuration).getMgrDoctorId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员查看病例的随访记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrFollowupRecord(patientRecordId: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return DefaultApiFp(configuration).getMgrFollowupRecord(patientRecordId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理端查看随访记录设置项
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrFollowupRecordOptions(options?: any): AxiosPromise<Array<FollowupRecordOptions>> {
            return DefaultApiFp(configuration).getMgrFollowupRecordOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询知识库列表
         * @param {string} [knowledgeType] 分类
         * @param {string} [keyword] 关键字
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrKnowledge(knowledgeType?: string, keyword?: string, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2006> {
            return DefaultApiFp(configuration).getMgrKnowledge(knowledgeType, keyword, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员查询知识库详情
         * @param {number} id 知识库ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrKnowledgeId(id: number, options?: any): AxiosPromise<Knowledge> {
            return DefaultApiFp(configuration).getMgrKnowledgeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询当前登录管理员信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrMe(options?: any): AxiosPromise<Admin> {
            return DefaultApiFp(configuration).getMgrMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员查看病例的就诊记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrMedicalRecord(patientRecordId: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2008> {
            return DefaultApiFp(configuration).getMgrMedicalRecord(patientRecordId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询患者列表
         * @param {string} [truename] 姓名
         * @param {string} [fromPlace] 地区
         * @param {string} [ageType] 儿童、少年、青年、中年、老年
         * @param {string} [doctorName] 所属医生姓名
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatient(truename?: string, fromPlace?: string, ageType?: string, doctorName?: string, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012> {
            return DefaultApiFp(configuration).getMgrPatient(truename, fromPlace, ageType, doctorName, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询患者详情
         * @param {number} id 患者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatientId(id: number, options?: any): AxiosPromise<Patient> {
            return DefaultApiFp(configuration).getMgrPatientId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理端查询病例列表
         * @param {string} [patientRecordNumber] 病例号
         * @param {string} [diseaseType] 病类
         * @param {string} [patientId] 患者ID
         * @param {string} [treatDateBegin] 治疗时间（开始）
         * @param {string} [treatDateEnd] 治疗时间（结束）
         * @param {number} [operation] 是否手术 1&#x3D;是 0&#x3D;否
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [score] 分型得分。例如:tlaosis &gt;&#x3D; 50或tlics BETWEEN 10 AND 20（注意空格不能省略）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatientRecord(patientRecordNumber?: string, diseaseType?: string, patientId?: string, treatDateBegin?: string, treatDateEnd?: string, operation?: number, page?: number, limit?: number, score?: string, options?: any): AxiosPromise<InlineResponse20022> {
            return DefaultApiFp(configuration).getMgrPatientRecord(patientRecordNumber, diseaseType, patientId, treatDateBegin, treatDateEnd, operation, page, limit, score, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员查询病例详情
         * @param {number} id 病例ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMgrPatientRecordId(id: number, options?: any): AxiosPromise<PatientRecord> {
            return DefaultApiFp(configuration).getMgrPatientRecordId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者查看沟通记录列表
         * @param {number} patientRecordId 病例ID
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientChat(patientRecordId: number, page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2001> {
            return DefaultApiFp(configuration).getPatientChat(patientRecordId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询当前登录患者信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientMe(options?: any): AxiosPromise<Patient> {
            return DefaultApiFp(configuration).getPatientMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者消息列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {string} [content] 关键字查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientMsg(page?: number, limit?: number, content?: string, options?: any): AxiosPromise<InlineResponse20023> {
            return DefaultApiFp(configuration).getPatientMsg(page, limit, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 未读消息数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientMsgUnRead(options?: any): AxiosPromise<InlineResponse20011> {
            return DefaultApiFp(configuration).getPatientMsgUnRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者端首页查询病例列表
         * @param {number} [page] 分页读取条数
         * @param {number} [limit] 页码，从1开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientPatientRecord(page?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20024> {
            return DefaultApiFp(configuration).getPatientPatientRecord(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询全部病类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesDiseasetype(options?: any): AxiosPromise<Array<TypesItem>> {
            return DefaultApiFp(configuration).getPublicTypesDiseasetype(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询全部医生职称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesDoctortitle(options?: any): AxiosPromise<Array<TypesItem>> {
            return DefaultApiFp(configuration).getPublicTypesDoctortitle(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询全部知识库分类
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesKnowledgetype(options?: any): AxiosPromise<Array<TypesItem>> {
            return DefaultApiFp(configuration).getPublicTypesKnowledgetype(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询全部提醒类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTypesRemindtype(options?: any): AxiosPromise<Array<TypesItem>> {
            return DefaultApiFp(configuration).getPublicTypesRemindtype(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生新增一条沟通记录
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChat(inlineObject2?: InlineObject2, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postChat(inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据随访记录中评分数据项，获得评分
         * @summary 获得评分
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorFollowupRecordScore(inlineObject5?: InlineObject5, options?: any): AxiosPromise<InlineResponse2003> {
            return DefaultApiFp(configuration).postDoctorFollowupRecordScore(inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorLogout(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postDoctorLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生创建患者
         * @param {InlineObject11} [inlineObject11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatient(inlineObject11?: InlineObject11, options?: any): AxiosPromise<InlineResponse20013> {
            return DefaultApiFp(configuration).postDoctorPatient(inlineObject11, options).then((request) => request(axios, basePath));
        },
        /**
         * 医生推送文章消息给患者
         * @summary 医生推送消息
         * @param {InlineObject12} [inlineObject12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatientChat(inlineObject12?: InlineObject12, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postDoctorPatientChat(inlineObject12, options).then((request) => request(axios, basePath));
        },
        /**
         * 医生推送文章消息给患者
         * @summary 推送消息
         * @param {InlineObject13} [inlineObject13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatientMsg(inlineObject13?: InlineObject13, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postDoctorPatientMsg(inlineObject13, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增病例
         * @param {InlineObject15} [inlineObject15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorPatientRecord(inlineObject15?: InlineObject15, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postDoctorPatientRecord(inlineObject15, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生创建新提醒
         * @param {InlineObject18} [inlineObject18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoctorReminder(inlineObject18?: InlineObject18, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postDoctorReminder(inlineObject18, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增随访记录
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollowupRecord(inlineObject4?: InlineObject4, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postFollowupRecord(inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员登录
         * @param {InlineObject19} [inlineObject19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(inlineObject19?: InlineObject19, options?: any): AxiosPromise<InlineResponse20017> {
            return DefaultApiFp(configuration).postLogin(inlineObject19, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生新增就诊记录
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMedicalRecord(inlineObject9?: InlineObject9, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMedicalRecord(inlineObject9, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建管理员
         * @param {InlineObject21} [inlineObject21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrAdmin(inlineObject21?: InlineObject21, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMgrAdmin(inlineObject21, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员创建医生
         * @param {InlineObject23} [inlineObject23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrDoctor(inlineObject23?: InlineObject23, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMgrDoctor(inlineObject23, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 审核医生注册
         * @param {InlineObject24} [inlineObject24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrDoctorVerify(inlineObject24?: InlineObject24, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMgrDoctorVerify(inlineObject24, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新发布知识库
         * @param {InlineObject26} [inlineObject26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrKnowledge(inlineObject26?: InlineObject26, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMgrKnowledge(inlineObject26, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量删除
         * @param {InlineObject27} [inlineObject27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrKnowledgeDelete(inlineObject27?: InlineObject27, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMgrKnowledgeDelete(inlineObject27, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 忘记密码(含发短信)
         * @param {InlineObject36} [inlineObject36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrPasswordForget(inlineObject36?: InlineObject36, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMgrPasswordForget(inlineObject36, options).then((request) => request(axios, basePath));
        },
        /**
         * 重置密码为手机号的后6位
         * @summary 重置管理员密码
         * @param {InlineObject30} [inlineObject30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMgrPasswordReset(inlineObject30?: InlineObject30, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postMgrPasswordReset(inlineObject30, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者新增一条沟通记录
         * @param {InlineObject31} [inlineObject31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPatientChat(inlineObject31?: InlineObject31, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postPatientChat(inlineObject31, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPatientLogout(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postPatientLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生小程序登录
         * @param {InlineObject34} [inlineObject34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicLoginDoctor(inlineObject34?: InlineObject34, options?: any): AxiosPromise<InlineResponse20025> {
            return DefaultApiFp(configuration).postPublicLoginDoctor(inlineObject34, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者小程序登录
         * @param {InlineObject35} [inlineObject35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicLoginPatient(inlineObject35?: InlineObject35, options?: any): AxiosPromise<InlineResponse20025> {
            return DefaultApiFp(configuration).postPublicLoginPatient(inlineObject35, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 注册医生
         * @param {InlineObject37} [inlineObject37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicRegisterDoctor(inlineObject37?: InlineObject37, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postPublicRegisterDoctor(inlineObject37, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 发送短信验证码
         * @param {InlineObject38} [inlineObject38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPublicSmsCaptcha(inlineObject38?: InlineObject38, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).postPublicSmsCaptcha(inlineObject38, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 标记管理员消息为已读
         * @param {number} id 消息ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAdminMsgId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putAdminMsgId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生编辑智能诊疗
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorAiDiagnosis(inlineObject?: InlineObject, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorAiDiagnosis(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生端动态计算智能诊疗分数
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorAiDiagnosisScore(inlineObject1?: InlineObject1, options?: any): AxiosPromise<AiDiagnosis> {
            return DefaultApiFp(configuration).putDoctorAiDiagnosisScore(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 只能撤回当天的沟通记录
         * @summary 医生撤回某沟通记录
         * @param {number} id 沟通记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorChatId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorChatId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 收藏或取消收藏知识库
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorKnowledgeFavorite(inlineObject6?: InlineObject6, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorKnowledgeFavorite(inlineObject6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生编辑本人信息
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorMe(inlineObject7?: InlineObject7, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorMe(inlineObject7, options).then((request) => request(axios, basePath));
        },
        /**
         * 标记当前所有未读消息为已读
         * @summary 医生阅读消息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorMsg(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorMsg(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生编辑属下患者信息
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorPatient(inlineObject10?: InlineObject10, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorPatient(inlineObject10, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑病例
         * @param {InlineObject14} [inlineObject14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorPatientRecord(inlineObject14?: InlineObject14, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorPatientRecord(inlineObject14, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生修改本人手机号码
         * @param {InlineObject16} [inlineObject16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorPhone(inlineObject16?: InlineObject16, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorPhone(inlineObject16, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生修改提醒
         * @param {InlineObject17} [inlineObject17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDoctorReminder(inlineObject17?: InlineObject17, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putDoctorReminder(inlineObject17, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改随访记录
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFollowupRecord(inlineObject3?: InlineObject3, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putFollowupRecord(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 医生修改就诊记录
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMedicalRecord(inlineObject8?: InlineObject8, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putMedicalRecord(inlineObject8, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑管理员
         * @param {InlineObject20} [inlineObject20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrAdmin(inlineObject20?: InlineObject20, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putMgrAdmin(inlineObject20, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理员编辑医生
         * @param {InlineObject22} [inlineObject22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrDoctor(inlineObject22?: InlineObject22, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putMgrDoctor(inlineObject22, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑知识库
         * @param {InlineObject25} [inlineObject25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrKnowledge(inlineObject25?: InlineObject25, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putMgrKnowledge(inlineObject25, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 当前管理员编辑个人资料
         * @param {InlineObject28} [inlineObject28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrMe(inlineObject28?: InlineObject28, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putMgrMe(inlineObject28, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改密码
         * @param {InlineObject29} [inlineObject29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMgrPassword(inlineObject29?: InlineObject29, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putMgrPassword(inlineObject29, options).then((request) => request(axios, basePath));
        },
        /**
         * 只能撤回当天的沟通记录
         * @summary 患者撤回某沟通记录
         * @param {number} id 沟通记录ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientChatId(id: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putPatientChatId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 小程序端可用加密方式修改昵称、头像等
         * @summary 修改当前患者信息
         * @param {InlineObject32} [inlineObject32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientMe(inlineObject32?: InlineObject32, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putPatientMe(inlineObject32, options).then((request) => request(axios, basePath));
        },
        /**
         * 标记当前所有未读消息为已读
         * @summary 患者阅读消息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientMsg(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putPatientMsg(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 患者修改本人手机号码
         * @param {InlineObject33} [inlineObject33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPatientPhone(inlineObject33?: InlineObject33, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).putPatientPhone(inlineObject33, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 批量删除管理员消息
     * @param {string} msgIds 消息ID组装字符串，‘,’分隔
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdminMsg(msgIds: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteAdminMsg(msgIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量删除消息
     * @param {string} msgIds 消息ID组装字符串，‘,’分隔
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDoctorMsg(msgIds: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteDoctorMsg(msgIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生删除患者
     * @param {number} id 患者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDoctorPatientId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteDoctorPatientId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生删除病例
     * @param {number} id 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDoctorPatientRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteDoctorPatientRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生删除提醒
     * @param {number} id 提醒ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDoctorReminderId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteDoctorReminderId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除随访记录
     * @param {number} id 随访记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteFollowupRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteFollowupRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除某就诊记录
     * @param {number} id 就诊记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMedicalRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteMedicalRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除管理员
     * @param {number} id 管理员ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMgrAdminId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteMgrAdminId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除医生
     * @param {number} id 医生ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMgrDoctorId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteMgrDoctorId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除知识库
     * @param {number} id 知识库ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMgrKnowledgeId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteMgrKnowledgeId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除患者
     * @param {number} id 患者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMgrPatientId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteMgrPatientId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员删除病例
     * @param {number} id 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMgrPatientRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteMgrPatientRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者端批量删除消息
     * @param {string} msgIds 消息ID组装字符串，‘,’分隔
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePatientMsg(msgIds: string, options?: any) {
        return DefaultApiFp(this.configuration).deletePatientMsg(msgIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员消息列表
     * @param {number} [readFlag] 消息阅读状态。0 未读，1 已读
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdminMsg(readFlag?: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getAdminMsg(readFlag, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员消息详情
     * @param {number} id 消息ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdminMsgId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getAdminMsgId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询智能诊疗详情
     * @param {number} patientRecordId 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorAiDiagnosis(patientRecordId: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorAiDiagnosis(patientRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询智能诊疗的全部选项
     * @param {number} patientRecordId 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorAiDiagnosisOptions(patientRecordId: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorAiDiagnosisOptions(patientRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询智能诊疗修改记录
     * @param {number} patientRecordId 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorAiDiagnosisRecord(patientRecordId: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorAiDiagnosisRecord(patientRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查看某病例沟通记录列表
     * @param {number} patientRecordId 病例ID
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorChat(patientRecordId: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorChat(patientRecordId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查看随访记录设置项
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorFollowupRecordOptions(options?: any) {
        return DefaultApiFp(this.configuration).getDoctorFollowupRecordOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 医生相关统计数据
     * @summary 统计数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorHomeData(options?: any) {
        return DefaultApiFp(this.configuration).getDoctorHomeData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询知识库列表
     * @param {string} [knowledgeType] 分类
     * @param {string} [keyword] 关键字
     * @param {number} [favorite] 是否收藏 1&#x3D;是 0&#x3D;否
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorKnowledge(knowledgeType?: string, keyword?: string, favorite?: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorKnowledge(knowledgeType, keyword, favorite, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询知识库详情
     * @param {number} id 知识库ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorKnowledgeId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorKnowledgeId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询当前登录的医生信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorMe(options?: any) {
        return DefaultApiFp(this.configuration).getDoctorMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生消息列表
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {string} [content] 关键字查询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorMsg(page?: number, limit?: number, content?: string, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorMsg(page, limit, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 未读消息条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorMsgUnRead(options?: any) {
        return DefaultApiFp(this.configuration).getDoctorMsgUnRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询患者列表
     * @param {string} [keyword] 患者姓名或电话号码
     * @param {number} [all] 1&#x3D;从全量患者库搜索 0&#x3D;只搜索医生属下病人
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorPatient(keyword?: string, all?: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorPatient(keyword, all, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询患者列表(只筛选有病例的患者)
     * @param {string} [keyword] 患者姓名
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorPatientHasRecord(keyword?: string, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorPatientHasRecord(keyword, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询患者详情
     * @param {number} id 患者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorPatientId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorPatientId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询病例列表
     * @param {string} [truename] 真实姓名
     * @param {string} [treatDateBegin] 治疗时间（开始）
     * @param {string} [treatDateEnd] 治疗时间（结束）
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorPatientRecord(truename?: string, treatDateBegin?: string, treatDateEnd?: string, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorPatientRecord(truename, treatDateBegin, treatDateEnd, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询病例详情
     * @param {number} id 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorPatientRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorPatientRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查询提醒列表
     * @param {number} patientRecordId 病例ID
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorReminder(patientRecordId: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorReminder(patientRecordId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查看提醒详情
     * @param {number} id 提醒ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDoctorReminderId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getDoctorReminderId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 阿里云OSS token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFileOssToken(options?: any) {
        return DefaultApiFp(this.configuration).getFileOssToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查看病例的随访记录列表
     * @param {number} patientRecordId 病例ID
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFollowupRecord(patientRecordId: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getFollowupRecord(patientRecordId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 随访记录详情
     * @param {number} id 随访记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFollowupRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getFollowupRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查看病例就诊记录列表
     * @param {number} patientRecordId 病例ID
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMedicalRecord(patientRecordId: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMedicalRecord(patientRecordId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生查看就诊记录详情
     * @param {number} id 就诊记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMedicalRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMedicalRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询管理员列表
     * @param {string} [truename] 姓名
     * @param {string} [account] 账号
     * @param {string} [createdAtBegin] 注册日期（开始）
     * @param {string} [createdAtEnd] 注册日期（结束）
     * @param {number} [status] 状态 1&#x3D;启用 0&#x3D;停用
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrAdmin(truename?: string, account?: string, createdAtBegin?: string, createdAtEnd?: string, status?: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrAdmin(truename, account, createdAtBegin, createdAtEnd, status, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询管理员详情
     * @param {number} id 管理员ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrAdminId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrAdminId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 未读消息数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrAdminMsgUnRead(options?: any) {
        return DefaultApiFp(this.configuration).getMgrAdminMsgUnRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员查询智能诊疗详情
     * @param {number} patientRecordId 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrAiDiagnosis(patientRecordId: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrAiDiagnosis(patientRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询智能诊疗的全部选项
     * @param {number} patientRecordId 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrAiDiagnosisOptions(patientRecordId: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrAiDiagnosisOptions(patientRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员查询智能诊疗修改记录
     * @param {number} patientRecordId 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrAiDiagnosisRecord(patientRecordId: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrAiDiagnosisRecord(patientRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询医生列表
     * @param {string} [truename] 姓名
     * @param {string} [hospitalName] 工作医院
     * @param {string} [titleName] 职称
     * @param {string} [fromPlace] 地区
     * @param {string} [createdAtBegin] 注册时间（开始）
     * @param {string} [createdAtEnd] 注册时间（结束）
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {number} [verifyState] 审核状态 0&#x3D;待审核 1&#x3D;通过
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrDoctor(truename?: string, hospitalName?: string, titleName?: string, fromPlace?: string, createdAtBegin?: string, createdAtEnd?: string, page?: number, limit?: number, verifyState?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrDoctor(truename, hospitalName, titleName, fromPlace, createdAtBegin, createdAtEnd, page, limit, verifyState, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询医生详情
     * @param {number} id 医生ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrDoctorId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrDoctorId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员查看病例的随访记录列表
     * @param {number} patientRecordId 病例ID
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrFollowupRecord(patientRecordId: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrFollowupRecord(patientRecordId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理端查看随访记录设置项
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrFollowupRecordOptions(options?: any) {
        return DefaultApiFp(this.configuration).getMgrFollowupRecordOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询知识库列表
     * @param {string} [knowledgeType] 分类
     * @param {string} [keyword] 关键字
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrKnowledge(knowledgeType?: string, keyword?: string, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrKnowledge(knowledgeType, keyword, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员查询知识库详情
     * @param {number} id 知识库ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrKnowledgeId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrKnowledgeId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询当前登录管理员信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrMe(options?: any) {
        return DefaultApiFp(this.configuration).getMgrMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员查看病例的就诊记录列表
     * @param {number} patientRecordId 病例ID
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrMedicalRecord(patientRecordId: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrMedicalRecord(patientRecordId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询患者列表
     * @param {string} [truename] 姓名
     * @param {string} [fromPlace] 地区
     * @param {string} [ageType] 儿童、少年、青年、中年、老年
     * @param {string} [doctorName] 所属医生姓名
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrPatient(truename?: string, fromPlace?: string, ageType?: string, doctorName?: string, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrPatient(truename, fromPlace, ageType, doctorName, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询患者详情
     * @param {number} id 患者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrPatientId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrPatientId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理端查询病例列表
     * @param {string} [patientRecordNumber] 病例号
     * @param {string} [diseaseType] 病类
     * @param {string} [patientId] 患者ID
     * @param {string} [treatDateBegin] 治疗时间（开始）
     * @param {string} [treatDateEnd] 治疗时间（结束）
     * @param {number} [operation] 是否手术 1&#x3D;是 0&#x3D;否
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {string} [score] 分型得分。例如:tlaosis &gt;&#x3D; 50或tlics BETWEEN 10 AND 20（注意空格不能省略）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrPatientRecord(patientRecordNumber?: string, diseaseType?: string, patientId?: string, treatDateBegin?: string, treatDateEnd?: string, operation?: number, page?: number, limit?: number, score?: string, options?: any) {
        return DefaultApiFp(this.configuration).getMgrPatientRecord(patientRecordNumber, diseaseType, patientId, treatDateBegin, treatDateEnd, operation, page, limit, score, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员查询病例详情
     * @param {number} id 病例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMgrPatientRecordId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMgrPatientRecordId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者查看沟通记录列表
     * @param {number} patientRecordId 病例ID
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPatientChat(patientRecordId: number, page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getPatientChat(patientRecordId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询当前登录患者信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPatientMe(options?: any) {
        return DefaultApiFp(this.configuration).getPatientMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者消息列表
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {string} [content] 关键字查询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPatientMsg(page?: number, limit?: number, content?: string, options?: any) {
        return DefaultApiFp(this.configuration).getPatientMsg(page, limit, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 未读消息数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPatientMsgUnRead(options?: any) {
        return DefaultApiFp(this.configuration).getPatientMsgUnRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者端首页查询病例列表
     * @param {number} [page] 分页读取条数
     * @param {number} [limit] 页码，从1开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPatientPatientRecord(page?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getPatientPatientRecord(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询全部病类
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicTypesDiseasetype(options?: any) {
        return DefaultApiFp(this.configuration).getPublicTypesDiseasetype(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询全部医生职称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicTypesDoctortitle(options?: any) {
        return DefaultApiFp(this.configuration).getPublicTypesDoctortitle(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询全部知识库分类
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicTypesKnowledgetype(options?: any) {
        return DefaultApiFp(this.configuration).getPublicTypesKnowledgetype(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询全部提醒类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicTypesRemindtype(options?: any) {
        return DefaultApiFp(this.configuration).getPublicTypesRemindtype(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生新增一条沟通记录
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postChat(inlineObject2?: InlineObject2, options?: any) {
        return DefaultApiFp(this.configuration).postChat(inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据随访记录中评分数据项，获得评分
     * @summary 获得评分
     * @param {InlineObject5} [inlineObject5] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDoctorFollowupRecordScore(inlineObject5?: InlineObject5, options?: any) {
        return DefaultApiFp(this.configuration).postDoctorFollowupRecordScore(inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生退出登录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDoctorLogout(options?: any) {
        return DefaultApiFp(this.configuration).postDoctorLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生创建患者
     * @param {InlineObject11} [inlineObject11] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDoctorPatient(inlineObject11?: InlineObject11, options?: any) {
        return DefaultApiFp(this.configuration).postDoctorPatient(inlineObject11, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 医生推送文章消息给患者
     * @summary 医生推送消息
     * @param {InlineObject12} [inlineObject12] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDoctorPatientChat(inlineObject12?: InlineObject12, options?: any) {
        return DefaultApiFp(this.configuration).postDoctorPatientChat(inlineObject12, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 医生推送文章消息给患者
     * @summary 推送消息
     * @param {InlineObject13} [inlineObject13] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDoctorPatientMsg(inlineObject13?: InlineObject13, options?: any) {
        return DefaultApiFp(this.configuration).postDoctorPatientMsg(inlineObject13, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增病例
     * @param {InlineObject15} [inlineObject15] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDoctorPatientRecord(inlineObject15?: InlineObject15, options?: any) {
        return DefaultApiFp(this.configuration).postDoctorPatientRecord(inlineObject15, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生创建新提醒
     * @param {InlineObject18} [inlineObject18] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDoctorReminder(inlineObject18?: InlineObject18, options?: any) {
        return DefaultApiFp(this.configuration).postDoctorReminder(inlineObject18, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增随访记录
     * @param {InlineObject4} [inlineObject4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFollowupRecord(inlineObject4?: InlineObject4, options?: any) {
        return DefaultApiFp(this.configuration).postFollowupRecord(inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员登录
     * @param {InlineObject19} [inlineObject19] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogin(inlineObject19?: InlineObject19, options?: any) {
        return DefaultApiFp(this.configuration).postLogin(inlineObject19, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生新增就诊记录
     * @param {InlineObject9} [inlineObject9] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMedicalRecord(inlineObject9?: InlineObject9, options?: any) {
        return DefaultApiFp(this.configuration).postMedicalRecord(inlineObject9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建管理员
     * @param {InlineObject21} [inlineObject21] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMgrAdmin(inlineObject21?: InlineObject21, options?: any) {
        return DefaultApiFp(this.configuration).postMgrAdmin(inlineObject21, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员创建医生
     * @param {InlineObject23} [inlineObject23] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMgrDoctor(inlineObject23?: InlineObject23, options?: any) {
        return DefaultApiFp(this.configuration).postMgrDoctor(inlineObject23, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 审核医生注册
     * @param {InlineObject24} [inlineObject24] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMgrDoctorVerify(inlineObject24?: InlineObject24, options?: any) {
        return DefaultApiFp(this.configuration).postMgrDoctorVerify(inlineObject24, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新发布知识库
     * @param {InlineObject26} [inlineObject26] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMgrKnowledge(inlineObject26?: InlineObject26, options?: any) {
        return DefaultApiFp(this.configuration).postMgrKnowledge(inlineObject26, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量删除
     * @param {InlineObject27} [inlineObject27] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMgrKnowledgeDelete(inlineObject27?: InlineObject27, options?: any) {
        return DefaultApiFp(this.configuration).postMgrKnowledgeDelete(inlineObject27, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 忘记密码(含发短信)
     * @param {InlineObject36} [inlineObject36] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMgrPasswordForget(inlineObject36?: InlineObject36, options?: any) {
        return DefaultApiFp(this.configuration).postMgrPasswordForget(inlineObject36, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 重置密码为手机号的后6位
     * @summary 重置管理员密码
     * @param {InlineObject30} [inlineObject30] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMgrPasswordReset(inlineObject30?: InlineObject30, options?: any) {
        return DefaultApiFp(this.configuration).postMgrPasswordReset(inlineObject30, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者新增一条沟通记录
     * @param {InlineObject31} [inlineObject31] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPatientChat(inlineObject31?: InlineObject31, options?: any) {
        return DefaultApiFp(this.configuration).postPatientChat(inlineObject31, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者退出登录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPatientLogout(options?: any) {
        return DefaultApiFp(this.configuration).postPatientLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生小程序登录
     * @param {InlineObject34} [inlineObject34] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPublicLoginDoctor(inlineObject34?: InlineObject34, options?: any) {
        return DefaultApiFp(this.configuration).postPublicLoginDoctor(inlineObject34, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者小程序登录
     * @param {InlineObject35} [inlineObject35] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPublicLoginPatient(inlineObject35?: InlineObject35, options?: any) {
        return DefaultApiFp(this.configuration).postPublicLoginPatient(inlineObject35, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 注册医生
     * @param {InlineObject37} [inlineObject37] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPublicRegisterDoctor(inlineObject37?: InlineObject37, options?: any) {
        return DefaultApiFp(this.configuration).postPublicRegisterDoctor(inlineObject37, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 发送短信验证码
     * @param {InlineObject38} [inlineObject38] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPublicSmsCaptcha(inlineObject38?: InlineObject38, options?: any) {
        return DefaultApiFp(this.configuration).postPublicSmsCaptcha(inlineObject38, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 标记管理员消息为已读
     * @param {number} id 消息ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putAdminMsgId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).putAdminMsgId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生编辑智能诊疗
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorAiDiagnosis(inlineObject?: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorAiDiagnosis(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生端动态计算智能诊疗分数
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorAiDiagnosisScore(inlineObject1?: InlineObject1, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorAiDiagnosisScore(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 只能撤回当天的沟通记录
     * @summary 医生撤回某沟通记录
     * @param {number} id 沟通记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorChatId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorChatId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 收藏或取消收藏知识库
     * @param {InlineObject6} [inlineObject6] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorKnowledgeFavorite(inlineObject6?: InlineObject6, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorKnowledgeFavorite(inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生编辑本人信息
     * @param {InlineObject7} [inlineObject7] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorMe(inlineObject7?: InlineObject7, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorMe(inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 标记当前所有未读消息为已读
     * @summary 医生阅读消息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorMsg(options?: any) {
        return DefaultApiFp(this.configuration).putDoctorMsg(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生编辑属下患者信息
     * @param {InlineObject10} [inlineObject10] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorPatient(inlineObject10?: InlineObject10, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorPatient(inlineObject10, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 编辑病例
     * @param {InlineObject14} [inlineObject14] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorPatientRecord(inlineObject14?: InlineObject14, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorPatientRecord(inlineObject14, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生修改本人手机号码
     * @param {InlineObject16} [inlineObject16] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorPhone(inlineObject16?: InlineObject16, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorPhone(inlineObject16, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生修改提醒
     * @param {InlineObject17} [inlineObject17] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDoctorReminder(inlineObject17?: InlineObject17, options?: any) {
        return DefaultApiFp(this.configuration).putDoctorReminder(inlineObject17, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改随访记录
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putFollowupRecord(inlineObject3?: InlineObject3, options?: any) {
        return DefaultApiFp(this.configuration).putFollowupRecord(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 医生修改就诊记录
     * @param {InlineObject8} [inlineObject8] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMedicalRecord(inlineObject8?: InlineObject8, options?: any) {
        return DefaultApiFp(this.configuration).putMedicalRecord(inlineObject8, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 编辑管理员
     * @param {InlineObject20} [inlineObject20] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMgrAdmin(inlineObject20?: InlineObject20, options?: any) {
        return DefaultApiFp(this.configuration).putMgrAdmin(inlineObject20, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理员编辑医生
     * @param {InlineObject22} [inlineObject22] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMgrDoctor(inlineObject22?: InlineObject22, options?: any) {
        return DefaultApiFp(this.configuration).putMgrDoctor(inlineObject22, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 编辑知识库
     * @param {InlineObject25} [inlineObject25] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMgrKnowledge(inlineObject25?: InlineObject25, options?: any) {
        return DefaultApiFp(this.configuration).putMgrKnowledge(inlineObject25, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 当前管理员编辑个人资料
     * @param {InlineObject28} [inlineObject28] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMgrMe(inlineObject28?: InlineObject28, options?: any) {
        return DefaultApiFp(this.configuration).putMgrMe(inlineObject28, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改密码
     * @param {InlineObject29} [inlineObject29] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMgrPassword(inlineObject29?: InlineObject29, options?: any) {
        return DefaultApiFp(this.configuration).putMgrPassword(inlineObject29, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 只能撤回当天的沟通记录
     * @summary 患者撤回某沟通记录
     * @param {number} id 沟通记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putPatientChatId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).putPatientChatId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 小程序端可用加密方式修改昵称、头像等
     * @summary 修改当前患者信息
     * @param {InlineObject32} [inlineObject32] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putPatientMe(inlineObject32?: InlineObject32, options?: any) {
        return DefaultApiFp(this.configuration).putPatientMe(inlineObject32, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 标记当前所有未读消息为已读
     * @summary 患者阅读消息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putPatientMsg(options?: any) {
        return DefaultApiFp(this.configuration).putPatientMsg(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 患者修改本人手机号码
     * @param {InlineObject33} [inlineObject33] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putPatientPhone(inlineObject33?: InlineObject33, options?: any) {
        return DefaultApiFp(this.configuration).putPatientPhone(inlineObject33, options).then((request) => request(this.axios, this.basePath));
    }

}


